
Smart_Home_Room_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  000015b0  00001644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000d8  008000d8  000016bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b72  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000137a  00000000  00000000  00005572  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001660  00000000  00000000  000068ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000600  00000000  00000000  00007f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000193e  00000000  00000000  0000854c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019d4  00000000  00000000  00009e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000b85e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      28:	0c 94 2b 02 	jmp	0x456	; 0x456 <__vector_10>
      2c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_11>
      30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	89 02       	muls	r24, r25
      56:	8e 02       	muls	r24, r30
      58:	93 02       	muls	r25, r19
      5a:	98 02       	muls	r25, r24
      5c:	9d 02       	muls	r25, r29
      5e:	a2 02       	muls	r26, r18
      60:	a7 02       	muls	r26, r23
      62:	ac 02       	muls	r26, r28
      64:	d7 02       	muls	r29, r23
      66:	dc 02       	muls	r29, r28
      68:	e1 02       	muls	r30, r17
      6a:	e6 02       	muls	r30, r22
      6c:	eb 02       	muls	r30, r27
      6e:	f0 02       	muls	r31, r16
      70:	f5 02       	muls	r31, r21
      72:	fa 02       	muls	r31, r26
      74:	25 03       	mulsu	r18, r21
      76:	2e 03       	fmul	r18, r22
      78:	38 03       	fmul	r19, r16
      7a:	43 03       	mulsu	r20, r19
      7c:	4e 03       	fmul	r20, r22
      7e:	58 03       	fmul	r21, r16
      80:	63 03       	mulsu	r22, r19
      82:	6e 03       	fmul	r22, r22
      84:	9f 03       	fmulsu	r17, r23
      86:	a2 03       	fmuls	r18, r18
      88:	a6 03       	fmuls	r18, r22
      8a:	ab 03       	fmulsu	r18, r19
      8c:	b0 03       	fmuls	r19, r16
      8e:	b4 03       	fmuls	r19, r20
      90:	b9 03       	fmulsu	r19, r17
      92:	be 03       	fmulsu	r19, r22
      94:	ca 04       	cpc	r12, r10
      96:	dc 04       	cpc	r13, r12
      98:	ef 04       	cpc	r14, r15
      9a:	f9 04       	cpc	r15, r9
      9c:	03 05       	cpc	r16, r3
      9e:	0c 05       	cpc	r16, r12
      a0:	18 05       	cpc	r17, r8
      a2:	cf 06       	cpc	r12, r31
      a4:	e2 06       	cpc	r14, r18
      a6:	f5 06       	cpc	r15, r21
      a8:	08 07       	cpc	r16, r24
      aa:	1b 07       	cpc	r17, r27
      ac:	2e 07       	cpc	r18, r30
      ae:	41 07       	cpc	r20, r17
      b0:	54 07       	cpc	r21, r20
      b2:	67 07       	cpc	r22, r23
      b4:	7a 07       	cpc	r23, r26
      b6:	8d 07       	cpc	r24, r29
      b8:	a0 07       	cpc	r26, r16
      ba:	b3 07       	cpc	r27, r19
      bc:	c6 07       	cpc	r28, r22
      be:	d7 07       	cpc	r29, r23
      c0:	ea 07       	cpc	r30, r26

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf e5       	ldi	r28, 0x5F	; 95
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	10 e0       	ldi	r17, 0x00	; 0
      d0:	a0 e6       	ldi	r26, 0x60	; 96
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	e0 eb       	ldi	r30, 0xB0	; 176
      d6:	f5 e1       	ldi	r31, 0x15	; 21
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a8 3d       	cpi	r26, 0xD8	; 216
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	20 e0       	ldi	r18, 0x00	; 0
      e6:	a8 ed       	ldi	r26, 0xD8	; 216
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	a5 3e       	cpi	r26, 0xE5	; 229
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	0e 94 b5 04 	call	0x96a	; 0x96a <main>
      f8:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <_exit>

000000fc <__bad_interrupt>:
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <ADC_Init>:
#include "ADC.h"

void ADC_Init(void)
{
	//ADC Enable:
	ADC_1->ADCSRA_Reg.Bits.ADEN_Bit = STD_High;
     100:	86 b1       	in	r24, 0x06	; 6
     102:	80 68       	ori	r24, 0x80	; 128
     104:	86 b9       	out	0x06, r24	; 6
	//ADC Frequency Prescaler -> 64:
	ADC_1->ADCSRA_Reg.Bits.ADPS_Bits = ADC_Prescaler_Select_Bits;
     106:	86 b1       	in	r24, 0x06	; 6
     108:	87 60       	ori	r24, 0x07	; 7
     10a:	86 b9       	out	0x06, r24	; 6
	//ADC Reference Voltage -> internal (2.56V):
	ADC_1->ADMUX_Reg.Bits.REFS_Bits = ADC_Voltage_Refrence_Bits;
     10c:	87 b1       	in	r24, 0x07	; 7
     10e:	80 6c       	ori	r24, 0xC0	; 192
     110:	87 b9       	out	0x07, r24	; 7
     112:	08 95       	ret

00000114 <ADC_Channel_Read>:
Uint16 ADC_Channel_Read(ADC_Channel_Type Channel)
{
	Uint16 Data = 0;

	//ADC Analog Channel Choice:
	ADC_1->ADMUX_Reg.Bits.MUX_Bits  =  Channel;
     114:	8f 71       	andi	r24, 0x1F	; 31
     116:	97 b1       	in	r25, 0x07	; 7
     118:	90 7e       	andi	r25, 0xE0	; 224
     11a:	89 2b       	or	r24, r25
     11c:	87 b9       	out	0x07, r24	; 7
	//Clear ADC interrupt flag: 
	ADC_1->ADCSRA_Reg.Bits.ADIF_Bit = STD_Low;
     11e:	86 b1       	in	r24, 0x06	; 6
     120:	8f 7e       	andi	r24, 0xEF	; 239
     122:	86 b9       	out	0x06, r24	; 6
	//ADC Start Conversion:
	ADC_1->ADCSRA_Reg.Bits.ADSC_Bit=STD_High;
     124:	86 b1       	in	r24, 0x06	; 6
     126:	80 64       	ori	r24, 0x40	; 64
     128:	86 b9       	out	0x06, r24	; 6
	//Wait for ADC interrupt flag:
	while (ADC_1->ADCSRA_Reg.Bits.ADIF_Bit==STD_Low);
     12a:	34 9b       	sbis	0x06, 4	; 6
     12c:	fe cf       	rjmp	.-4      	; 0x12a <ADC_Channel_Read+0x16>
	//ADC Read Data
	Data |= (ADC_1->ADCL_Reg | (ADC_1->ADCH_Reg << STD_Reg_Bits_Number) );
     12e:	24 b1       	in	r18, 0x04	; 4
     130:	85 b1       	in	r24, 0x05	; 5
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	98 2f       	mov	r25, r24
     136:	88 27       	eor	r24, r24
	return Data;
     138:	82 2b       	or	r24, r18
     13a:	08 95       	ret

0000013c <DC_Motor_Init>:
{

	DIO_Channel_Write(DC_Motor_IN2,STD_High);
	DIO_Channel_Write(DC_Motor_IN1,STD_Low);
	Timer1_NonInv_FPWM_Duty(DC_Motor_COM , Speed);
}
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	00 d0       	rcall	.+0      	; 0x142 <DC_Motor_Init+0x6>
     142:	00 d0       	rcall	.+0      	; 0x144 <DC_Motor_Init+0x8>
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
     148:	61 e0       	ldi	r22, 0x01	; 1
     14a:	8a e1       	ldi	r24, 0x1A	; 26
     14c:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     150:	61 e0       	ldi	r22, 0x01	; 1
     152:	8b e1       	ldi	r24, 0x1B	; 27
     154:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     158:	61 e0       	ldi	r22, 0x01	; 1
     15a:	8c e1       	ldi	r24, 0x1C	; 28
     15c:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     160:	85 e0       	ldi	r24, 0x05	; 5
     162:	89 83       	std	Y+1, r24	; 0x01
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	8a 83       	std	Y+2, r24	; 0x02
     168:	82 e0       	ldi	r24, 0x02	; 2
     16a:	8b 83       	std	Y+3, r24	; 0x03
     16c:	83 e0       	ldi	r24, 0x03	; 3
     16e:	8c 83       	std	Y+4, r24	; 0x04
     170:	ce 01       	movw	r24, r28
     172:	01 96       	adiw	r24, 0x01	; 1
     174:	0e 94 12 08 	call	0x1024	; 0x1024 <Timer1_Init>
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	0f 90       	pop	r0
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <DC_Motor_CW>:
     186:	cf 93       	push	r28
     188:	c8 2f       	mov	r28, r24
     18a:	60 e0       	ldi	r22, 0x00	; 0
     18c:	8b e1       	ldi	r24, 0x1B	; 27
     18e:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_Channel_Write>
     192:	61 e0       	ldi	r22, 0x01	; 1
     194:	8a e1       	ldi	r24, 0x1A	; 26
     196:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_Channel_Write>
     19a:	6c 2f       	mov	r22, r28
     19c:	70 e0       	ldi	r23, 0x00	; 0
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatunsisf>
     1a6:	ab 01       	movw	r20, r22
     1a8:	bc 01       	movw	r22, r24
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	0e 94 20 08 	call	0x1040	; 0x1040 <Timer1_NonInv_FPWM_Duty>
     1b0:	cf 91       	pop	r28
     1b2:	08 95       	ret

000001b4 <DC_Motor_Stop>:

void DC_Motor_Stop(void)
{
	DIO_Channel_Write(DC_Motor_IN2,STD_High);
     1b4:	61 e0       	ldi	r22, 0x01	; 1
     1b6:	8b e1       	ldi	r24, 0x1B	; 27
     1b8:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_Channel_Write>
	DIO_Channel_Write(DC_Motor_IN1,STD_High);
     1bc:	61 e0       	ldi	r22, 0x01	; 1
     1be:	8a e1       	ldi	r24, 0x1A	; 26
     1c0:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_Channel_Write>
     1c4:	08 95       	ret

000001c6 <Delay_Init>:
 */ 

#include "Delay.h"

void Delay_Init(void)
{
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	00 d0       	rcall	.+0      	; 0x1cc <Delay_Init+0x6>
     1cc:	1f 92       	push	r1
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
	Timer0_Init_Type Timer0_Init_Delay = {Timer0_WG_Normal_Mode,Timer0_COM_Normal_Mode,Timer0_CS_64Presc};
     1d2:	19 82       	std	Y+1, r1	; 0x01
     1d4:	1a 82       	std	Y+2, r1	; 0x02
     1d6:	83 e0       	ldi	r24, 0x03	; 3
     1d8:	8b 83       	std	Y+3, r24	; 0x03
	Timer0_Init(&Timer0_Init_Delay);	
     1da:	ce 01       	movw	r24, r28
     1dc:	01 96       	adiw	r24, 0x01	; 1
     1de:	0e 94 85 06 	call	0xd0a	; 0xd0a <Timer0_Init>
	Enable_OVF_Interrupt();
     1e2:	89 b7       	in	r24, 0x39	; 57
     1e4:	81 60       	ori	r24, 0x01	; 1
     1e6:	89 bf       	out	0x39, r24	; 57
	Enable_OCR_Interrupt();
     1e8:	89 b7       	in	r24, 0x39	; 57
     1ea:	82 60       	ori	r24, 0x02	; 2
     1ec:	89 bf       	out	0x39, r24	; 57
	Enable_General_Interrupt();
     1ee:	78 94       	sei
}
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <Delay_us>:

void Delay_us(Uint32 Delay_Time_us)
{
     1fc:	cf 92       	push	r12
     1fe:	df 92       	push	r13
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
	Uint16  Prescaler   =0;
	Uint32  F_OS        =0;
	Float32 Delay_Calcs =0;
	Timer0_OVFs         =0;
     204:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <Timer0_OVFs>
     208:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <Timer0_OVFs+0x1>
     20c:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <Timer0_OVFs+0x2>
     210:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <Timer0_OVFs+0x3>
	Timer0_OVF_Count    =0;
     214:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <Timer0_OVF_Count>
     218:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <Timer0_OVF_Count+0x1>
     21c:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <Timer0_OVF_Count+0x2>
     220:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <Timer0_OVF_Count+0x3>
	Timer0_OCR_Flag     =0;
     224:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <Timer0_OCR_Flag>
	
	Delay_Time_us   = (Float32)Delay_Time_us;
     228:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatunsisf>
     22c:	0e 94 35 09 	call	0x126a	; 0x126a <__fixunssfsi>
     230:	6b 01       	movw	r12, r22
     232:	7c 01       	movw	r14, r24
	Prescaler       = (Float32)Timer0_CS_Select(Timer0_CS_64Presc);
     234:	83 e0       	ldi	r24, 0x03	; 3
     236:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Timer0_CS_Select>
     23a:	28 2f       	mov	r18, r24
     23c:	30 e0       	ldi	r19, 0x00	; 0
	F_OS            = (Float32)(F_CPU/1000000);
	Delay_Calcs     = (Float32)((Delay_Time_us*F_OS) / (256*Prescaler));
     23e:	d7 01       	movw	r26, r14
     240:	c6 01       	movw	r24, r12
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	aa 1f       	adc	r26, r26
     248:	bb 1f       	adc	r27, r27
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	aa 1f       	adc	r26, r26
     250:	bb 1f       	adc	r27, r27
     252:	bc 01       	movw	r22, r24
     254:	cd 01       	movw	r24, r26
     256:	66 0f       	add	r22, r22
     258:	77 1f       	adc	r23, r23
     25a:	88 1f       	adc	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	66 0f       	add	r22, r22
     260:	77 1f       	adc	r23, r23
     262:	88 1f       	adc	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	32 2f       	mov	r19, r18
     268:	22 27       	eor	r18, r18
     26a:	40 e0       	ldi	r20, 0x00	; 0
     26c:	50 e0       	ldi	r21, 0x00	; 0
     26e:	0e 94 5f 0a 	call	0x14be	; 0x14be <__udivmodsi4>
     272:	ca 01       	movw	r24, r20
     274:	b9 01       	movw	r22, r18
     276:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatunsisf>
     27a:	6b 01       	movw	r12, r22
     27c:	7c 01       	movw	r14, r24
	Timer0_OVFs     = ( (Uint32)( Delay_Calcs) );
     27e:	0e 94 35 09 	call	0x126a	; 0x126a <__fixunssfsi>
     282:	60 93 e1 00 	sts	0x00E1, r22	; 0x8000e1 <Timer0_OVFs>
     286:	70 93 e2 00 	sts	0x00E2, r23	; 0x8000e2 <Timer0_OVFs+0x1>
     28a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <Timer0_OVFs+0x2>
     28e:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <Timer0_OVFs+0x3>
	Timer0_OCR0_Reg = (Uint8)( (Delay_Calcs - Timer0_OVFs)*256 - 1 );
     292:	60 91 e1 00 	lds	r22, 0x00E1	; 0x8000e1 <Timer0_OVFs>
     296:	70 91 e2 00 	lds	r23, 0x00E2	; 0x8000e2 <Timer0_OVFs+0x1>
     29a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <Timer0_OVFs+0x2>
     29e:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <Timer0_OVFs+0x3>
     2a2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatunsisf>
     2a6:	9b 01       	movw	r18, r22
     2a8:	ac 01       	movw	r20, r24
     2aa:	c7 01       	movw	r24, r14
     2ac:	b6 01       	movw	r22, r12
     2ae:	0e 94 56 08 	call	0x10ac	; 0x10ac <__subsf3>
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	40 e8       	ldi	r20, 0x80	; 128
     2b8:	53 e4       	ldi	r21, 0x43	; 67
     2ba:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__mulsf3>
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	40 e8       	ldi	r20, 0x80	; 128
     2c4:	5f e3       	ldi	r21, 0x3F	; 63
     2c6:	0e 94 56 08 	call	0x10ac	; 0x10ac <__subsf3>
     2ca:	0e 94 35 09 	call	0x126a	; 0x126a <__fixunssfsi>
     2ce:	6c bf       	out	0x3c, r22	; 60

	while(!(Timer0_OVF_Count == Timer0_OVFs));
     2d0:	40 91 dc 00 	lds	r20, 0x00DC	; 0x8000dc <Timer0_OVF_Count>
     2d4:	50 91 dd 00 	lds	r21, 0x00DD	; 0x8000dd <Timer0_OVF_Count+0x1>
     2d8:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <Timer0_OVF_Count+0x2>
     2dc:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <Timer0_OVF_Count+0x3>
     2e0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <Timer0_OVFs>
     2e4:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <Timer0_OVFs+0x1>
     2e8:	a0 91 e3 00 	lds	r26, 0x00E3	; 0x8000e3 <Timer0_OVFs+0x2>
     2ec:	b0 91 e4 00 	lds	r27, 0x00E4	; 0x8000e4 <Timer0_OVFs+0x3>
     2f0:	48 17       	cp	r20, r24
     2f2:	59 07       	cpc	r21, r25
     2f4:	6a 07       	cpc	r22, r26
     2f6:	7b 07       	cpc	r23, r27
     2f8:	59 f7       	brne	.-42     	; 0x2d0 <Delay_us+0xd4>
	while(Timer0_OCR_Flag == 0);
     2fa:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <Timer0_OCR_Flag>
     2fe:	88 23       	and	r24, r24
     300:	e1 f3       	breq	.-8      	; 0x2fa <Delay_us+0xfe>
}
     302:	ff 90       	pop	r15
     304:	ef 90       	pop	r14
     306:	df 90       	pop	r13
     308:	cf 90       	pop	r12
     30a:	08 95       	ret

0000030c <Delay_ms>:

void Delay_ms(Uint32 Delay_Time_ms)
{
     30c:	cf 92       	push	r12
     30e:	df 92       	push	r13
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	6b 01       	movw	r12, r22
     31a:	7c 01       	movw	r14, r24
	Uint16  Prescaler   =0;
	Uint32  F_OS        =0;
	Float32 Delay_Calcs =0;
	Timer0_OVFs         =0;
     31c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <Timer0_OVFs>
     320:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <Timer0_OVFs+0x1>
     324:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <Timer0_OVFs+0x2>
     328:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <Timer0_OVFs+0x3>
	Timer0_OVF_Count    =0;
     32c:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <Timer0_OVF_Count>
     330:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <Timer0_OVF_Count+0x1>
     334:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <Timer0_OVF_Count+0x2>
     338:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <Timer0_OVF_Count+0x3>
	Timer0_OCR_Flag     =0;
     33c:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <Timer0_OCR_Flag>
	
	Prescaler       = (Float32)Timer0_CS_Select(Timer0_CS_64Presc);
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Timer0_CS_Select>
     346:	c8 2f       	mov	r28, r24
     348:	d0 e0       	ldi	r29, 0x00	; 0
	Delay_Time_ms   = (Float32)Delay_Time_ms;
     34a:	c7 01       	movw	r24, r14
     34c:	b6 01       	movw	r22, r12
     34e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatunsisf>
     352:	0e 94 35 09 	call	0x126a	; 0x126a <__fixunssfsi>
     356:	9b 01       	movw	r18, r22
     358:	ac 01       	movw	r20, r24
	F_OS            = (Float32)(F_CPU/1000);
	Delay_Calcs     = (Float32)((Delay_Time_ms*F_OS) / (256*Prescaler));
     35a:	a0 e8       	ldi	r26, 0x80	; 128
     35c:	be e3       	ldi	r27, 0x3E	; 62
     35e:	0e 94 87 0a 	call	0x150e	; 0x150e <__muluhisi3>
     362:	3c 2f       	mov	r19, r28
     364:	22 27       	eor	r18, r18
     366:	40 e0       	ldi	r20, 0x00	; 0
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	0e 94 5f 0a 	call	0x14be	; 0x14be <__udivmodsi4>
     36e:	ca 01       	movw	r24, r20
     370:	b9 01       	movw	r22, r18
     372:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatunsisf>
     376:	6b 01       	movw	r12, r22
     378:	7c 01       	movw	r14, r24
	Timer0_OVFs     = ((Uint32)(Delay_Calcs));
     37a:	0e 94 35 09 	call	0x126a	; 0x126a <__fixunssfsi>
     37e:	60 93 e1 00 	sts	0x00E1, r22	; 0x8000e1 <Timer0_OVFs>
     382:	70 93 e2 00 	sts	0x00E2, r23	; 0x8000e2 <Timer0_OVFs+0x1>
     386:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <Timer0_OVFs+0x2>
     38a:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <Timer0_OVFs+0x3>
	Timer0_OCR0_Reg = (Uint8)( (Delay_Calcs - Timer0_OVFs)*256 - 1 );
     38e:	60 91 e1 00 	lds	r22, 0x00E1	; 0x8000e1 <Timer0_OVFs>
     392:	70 91 e2 00 	lds	r23, 0x00E2	; 0x8000e2 <Timer0_OVFs+0x1>
     396:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <Timer0_OVFs+0x2>
     39a:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <Timer0_OVFs+0x3>
     39e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatunsisf>
     3a2:	9b 01       	movw	r18, r22
     3a4:	ac 01       	movw	r20, r24
     3a6:	c7 01       	movw	r24, r14
     3a8:	b6 01       	movw	r22, r12
     3aa:	0e 94 56 08 	call	0x10ac	; 0x10ac <__subsf3>
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	40 e8       	ldi	r20, 0x80	; 128
     3b4:	53 e4       	ldi	r21, 0x43	; 67
     3b6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__mulsf3>
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	40 e8       	ldi	r20, 0x80	; 128
     3c0:	5f e3       	ldi	r21, 0x3F	; 63
     3c2:	0e 94 56 08 	call	0x10ac	; 0x10ac <__subsf3>
     3c6:	0e 94 35 09 	call	0x126a	; 0x126a <__fixunssfsi>
     3ca:	6c bf       	out	0x3c, r22	; 60
	
	while(!(Timer0_OVF_Count == Timer0_OVFs));
     3cc:	40 91 dc 00 	lds	r20, 0x00DC	; 0x8000dc <Timer0_OVF_Count>
     3d0:	50 91 dd 00 	lds	r21, 0x00DD	; 0x8000dd <Timer0_OVF_Count+0x1>
     3d4:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <Timer0_OVF_Count+0x2>
     3d8:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <Timer0_OVF_Count+0x3>
     3dc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <Timer0_OVFs>
     3e0:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <Timer0_OVFs+0x1>
     3e4:	a0 91 e3 00 	lds	r26, 0x00E3	; 0x8000e3 <Timer0_OVFs+0x2>
     3e8:	b0 91 e4 00 	lds	r27, 0x00E4	; 0x8000e4 <Timer0_OVFs+0x3>
     3ec:	48 17       	cp	r20, r24
     3ee:	59 07       	cpc	r21, r25
     3f0:	6a 07       	cpc	r22, r26
     3f2:	7b 07       	cpc	r23, r27
     3f4:	59 f7       	brne	.-42     	; 0x3cc <Delay_ms+0xc0>
	while(Timer0_OCR_Flag == 0);
     3f6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <Timer0_OCR_Flag>
     3fa:	88 23       	and	r24, r24
     3fc:	e1 f3       	breq	.-8      	; 0x3f6 <Delay_ms+0xea>
}
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	ff 90       	pop	r15
     404:	ef 90       	pop	r14
     406:	df 90       	pop	r13
     408:	cf 90       	pop	r12
     40a:	08 95       	ret

0000040c <__vector_11>:

ISR(TIMER0_OVF_vect)
{
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	8f 93       	push	r24
     418:	9f 93       	push	r25
     41a:	af 93       	push	r26
     41c:	bf 93       	push	r27
	Timer0_OVF_Count++;
     41e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <Timer0_OVF_Count>
     422:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <Timer0_OVF_Count+0x1>
     426:	a0 91 de 00 	lds	r26, 0x00DE	; 0x8000de <Timer0_OVF_Count+0x2>
     42a:	b0 91 df 00 	lds	r27, 0x00DF	; 0x8000df <Timer0_OVF_Count+0x3>
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	a1 1d       	adc	r26, r1
     432:	b1 1d       	adc	r27, r1
     434:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <Timer0_OVF_Count>
     438:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <Timer0_OVF_Count+0x1>
     43c:	a0 93 de 00 	sts	0x00DE, r26	; 0x8000de <Timer0_OVF_Count+0x2>
     440:	b0 93 df 00 	sts	0x00DF, r27	; 0x8000df <Timer0_OVF_Count+0x3>
}
     444:	bf 91       	pop	r27
     446:	af 91       	pop	r26
     448:	9f 91       	pop	r25
     44a:	8f 91       	pop	r24
     44c:	0f 90       	pop	r0
     44e:	0f be       	out	0x3f, r0	; 63
     450:	0f 90       	pop	r0
     452:	1f 90       	pop	r1
     454:	18 95       	reti

00000456 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     456:	1f 92       	push	r1
     458:	0f 92       	push	r0
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	0f 92       	push	r0
     45e:	11 24       	eor	r1, r1
     460:	4f 93       	push	r20
     462:	5f 93       	push	r21
     464:	6f 93       	push	r22
     466:	7f 93       	push	r23
     468:	8f 93       	push	r24
     46a:	9f 93       	push	r25
     46c:	af 93       	push	r26
     46e:	bf 93       	push	r27
	if(Timer0_OVF_Count == Timer0_OVFs)
     470:	40 91 dc 00 	lds	r20, 0x00DC	; 0x8000dc <Timer0_OVF_Count>
     474:	50 91 dd 00 	lds	r21, 0x00DD	; 0x8000dd <Timer0_OVF_Count+0x1>
     478:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <Timer0_OVF_Count+0x2>
     47c:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <Timer0_OVF_Count+0x3>
     480:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <Timer0_OVFs>
     484:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <Timer0_OVFs+0x1>
     488:	a0 91 e3 00 	lds	r26, 0x00E3	; 0x8000e3 <Timer0_OVFs+0x2>
     48c:	b0 91 e4 00 	lds	r27, 0x00E4	; 0x8000e4 <Timer0_OVFs+0x3>
     490:	48 17       	cp	r20, r24
     492:	59 07       	cpc	r21, r25
     494:	6a 07       	cpc	r22, r26
     496:	7b 07       	cpc	r23, r27
     498:	59 f4       	brne	.+22     	; 0x4b0 <__vector_10+0x5a>
	{
		Timer0_OVF_Count=0;
     49a:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <Timer0_OVF_Count>
     49e:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <Timer0_OVF_Count+0x1>
     4a2:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <Timer0_OVF_Count+0x2>
     4a6:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <Timer0_OVF_Count+0x3>
		Timer0_OCR_Flag =1;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <Timer0_OCR_Flag>
	}
     4b0:	bf 91       	pop	r27
     4b2:	af 91       	pop	r26
     4b4:	9f 91       	pop	r25
     4b6:	8f 91       	pop	r24
     4b8:	7f 91       	pop	r23
     4ba:	6f 91       	pop	r22
     4bc:	5f 91       	pop	r21
     4be:	4f 91       	pop	r20
     4c0:	0f 90       	pop	r0
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	0f 90       	pop	r0
     4c6:	1f 90       	pop	r1
     4c8:	18 95       	reti

000004ca <DIO_Channel_Mode>:
*/

#include "DIO.h"

void  DIO_Channel_Mode(DIO_Channel_Type Channel , DIO_Direction_Type Direction)
{
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
	DIO_Port_Type Port = Channel/STD_Reg_Bits_Number;
     4ce:	98 2f       	mov	r25, r24
     4d0:	96 95       	lsr	r25
     4d2:	96 95       	lsr	r25
     4d4:	96 95       	lsr	r25
	DIO_Bit_Type  Bit  = Channel%STD_Reg_Bits_Number;
     4d6:	e8 2f       	mov	r30, r24
     4d8:	e7 70       	andi	r30, 0x07	; 7
	volatile DIO_Reg_Type * Reg = 0x00 ;
	
	switch(Port)
     4da:	91 30       	cpi	r25, 0x01	; 1
     4dc:	41 f0       	breq	.+16     	; 0x4ee <DIO_Channel_Mode+0x24>
     4de:	80 f0       	brcs	.+32     	; 0x500 <DIO_Channel_Mode+0x36>
     4e0:	92 30       	cpi	r25, 0x02	; 2
     4e2:	41 f0       	breq	.+16     	; 0x4f4 <DIO_Channel_Mode+0x2a>
     4e4:	93 30       	cpi	r25, 0x03	; 3
     4e6:	49 f0       	breq	.+18     	; 0x4fa <DIO_Channel_Mode+0x30>

void  DIO_Channel_Mode(DIO_Channel_Type Channel , DIO_Direction_Type Direction)
{
	DIO_Port_Type Port = Channel/STD_Reg_Bits_Number;
	DIO_Bit_Type  Bit  = Channel%STD_Reg_Bits_Number;
	volatile DIO_Reg_Type * Reg = 0x00 ;
     4e8:	c0 e0       	ldi	r28, 0x00	; 0
     4ea:	d0 e0       	ldi	r29, 0x00	; 0
     4ec:	0b c0       	rjmp	.+22     	; 0x504 <DIO_Channel_Mode+0x3a>
		case DIO_PortA :
		Reg = &(DIO->DDRA_Reg);
		break;
		
		case DIO_PortB :
		Reg = &(DIO->DDRB_Reg);
     4ee:	c7 e3       	ldi	r28, 0x37	; 55
     4f0:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     4f2:	08 c0       	rjmp	.+16     	; 0x504 <DIO_Channel_Mode+0x3a>
		
		case DIO_PortC :
		Reg = &(DIO->DDRC_Reg);
     4f4:	c4 e3       	ldi	r28, 0x34	; 52
     4f6:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     4f8:	05 c0       	rjmp	.+10     	; 0x504 <DIO_Channel_Mode+0x3a>
		
		case DIO_PortD :
		Reg = &(DIO->DDRD_Reg);
     4fa:	c1 e3       	ldi	r28, 0x31	; 49
     4fc:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_Channel_Mode+0x3a>
	volatile DIO_Reg_Type * Reg = 0x00 ;
	
	switch(Port)
	{
		case DIO_PortA :
		Reg = &(DIO->DDRA_Reg);
     500:	ca e3       	ldi	r28, 0x3A	; 58
     502:	d0 e0       	ldi	r29, 0x00	; 0
		case DIO_PortD :
		Reg = &(DIO->DDRD_Reg);
		break;
	}
	
	switch(Bit)
     504:	8e 2f       	mov	r24, r30
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	fc 01       	movw	r30, r24
     50a:	e6 5d       	subi	r30, 0xD6	; 214
     50c:	ff 4f       	sbci	r31, 0xFF	; 255
     50e:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__tablejump2__>
	{
		case DIO_Bit_0 :
		Reg->Bits.Bit_0 = Direction;
     512:	88 81       	ld	r24, Y
     514:	60 fb       	bst	r22, 0
     516:	80 f9       	bld	r24, 0
     518:	88 83       	st	Y, r24
		break;
     51a:	22 c0       	rjmp	.+68     	; 0x560 <DIO_Channel_Mode+0x96>
		
		case DIO_Bit_1 :
		Reg->Bits.Bit_1 = Direction;
     51c:	88 81       	ld	r24, Y
     51e:	60 fb       	bst	r22, 0
     520:	81 f9       	bld	r24, 1
     522:	88 83       	st	Y, r24
		break;
     524:	1d c0       	rjmp	.+58     	; 0x560 <DIO_Channel_Mode+0x96>
		
		case DIO_Bit_2 :
		Reg->Bits.Bit_2 = Direction;
     526:	88 81       	ld	r24, Y
     528:	60 fb       	bst	r22, 0
     52a:	82 f9       	bld	r24, 2
     52c:	88 83       	st	Y, r24
		break;
     52e:	18 c0       	rjmp	.+48     	; 0x560 <DIO_Channel_Mode+0x96>
		
		case DIO_Bit_3 :
		Reg->Bits.Bit_3 = Direction;
     530:	88 81       	ld	r24, Y
     532:	60 fb       	bst	r22, 0
     534:	83 f9       	bld	r24, 3
     536:	88 83       	st	Y, r24
		break;
     538:	13 c0       	rjmp	.+38     	; 0x560 <DIO_Channel_Mode+0x96>
		
		case DIO_Bit_4 :
		Reg->Bits.Bit_4 = Direction;
     53a:	88 81       	ld	r24, Y
     53c:	60 fb       	bst	r22, 0
     53e:	84 f9       	bld	r24, 4
     540:	88 83       	st	Y, r24
		break;
     542:	0e c0       	rjmp	.+28     	; 0x560 <DIO_Channel_Mode+0x96>
		
		case DIO_Bit_5 :
		Reg->Bits.Bit_5 = Direction;
     544:	88 81       	ld	r24, Y
     546:	60 fb       	bst	r22, 0
     548:	85 f9       	bld	r24, 5
     54a:	88 83       	st	Y, r24
		break;
     54c:	09 c0       	rjmp	.+18     	; 0x560 <DIO_Channel_Mode+0x96>
		
		case DIO_Bit_6 :
		Reg->Bits.Bit_6 = Direction;
     54e:	88 81       	ld	r24, Y
     550:	60 fb       	bst	r22, 0
     552:	86 f9       	bld	r24, 6
     554:	88 83       	st	Y, r24
		break;
     556:	04 c0       	rjmp	.+8      	; 0x560 <DIO_Channel_Mode+0x96>
		
		case DIO_Bit_7 :
		Reg->Bits.Bit_7 = Direction;
     558:	88 81       	ld	r24, Y
     55a:	60 fb       	bst	r22, 0
     55c:	87 f9       	bld	r24, 7
     55e:	88 83       	st	Y, r24
		break;
	}
}
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <DIO_Channel_Write>:

void  DIO_Channel_Write(DIO_Channel_Type Channel , STD_Level_Type Level)
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
	DIO_Port_Type Port = Channel/STD_Reg_Bits_Number;
     56a:	98 2f       	mov	r25, r24
     56c:	96 95       	lsr	r25
     56e:	96 95       	lsr	r25
     570:	96 95       	lsr	r25
	DIO_Bit_Type  Bit  = Channel%STD_Reg_Bits_Number;
     572:	e8 2f       	mov	r30, r24
     574:	e7 70       	andi	r30, 0x07	; 7
	volatile DIO_Reg_Type * Reg = 0x00 ;

	switch(Port)
     576:	91 30       	cpi	r25, 0x01	; 1
     578:	41 f0       	breq	.+16     	; 0x58a <DIO_Channel_Write+0x24>
     57a:	80 f0       	brcs	.+32     	; 0x59c <DIO_Channel_Write+0x36>
     57c:	92 30       	cpi	r25, 0x02	; 2
     57e:	41 f0       	breq	.+16     	; 0x590 <DIO_Channel_Write+0x2a>
     580:	93 30       	cpi	r25, 0x03	; 3
     582:	49 f0       	breq	.+18     	; 0x596 <DIO_Channel_Write+0x30>

void  DIO_Channel_Write(DIO_Channel_Type Channel , STD_Level_Type Level)
{
	DIO_Port_Type Port = Channel/STD_Reg_Bits_Number;
	DIO_Bit_Type  Bit  = Channel%STD_Reg_Bits_Number;
	volatile DIO_Reg_Type * Reg = 0x00 ;
     584:	c0 e0       	ldi	r28, 0x00	; 0
     586:	d0 e0       	ldi	r29, 0x00	; 0
     588:	0b c0       	rjmp	.+22     	; 0x5a0 <DIO_Channel_Write+0x3a>
		case DIO_PortA :
		Reg = &(DIO->PORTA_Reg);
		break;
		
		case DIO_PortB :
		Reg = &(DIO->PORTB_Reg);
     58a:	c8 e3       	ldi	r28, 0x38	; 56
     58c:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     58e:	08 c0       	rjmp	.+16     	; 0x5a0 <DIO_Channel_Write+0x3a>
		
		case DIO_PortC :
		Reg = &(DIO->PORTC_Reg);
     590:	c5 e3       	ldi	r28, 0x35	; 53
     592:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     594:	05 c0       	rjmp	.+10     	; 0x5a0 <DIO_Channel_Write+0x3a>
		
		case DIO_PortD :
		Reg = &(DIO->PORTD_Reg);
     596:	c2 e3       	ldi	r28, 0x32	; 50
     598:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_Channel_Write+0x3a>
	volatile DIO_Reg_Type * Reg = 0x00 ;

	switch(Port)
	{
		case DIO_PortA :
		Reg = &(DIO->PORTA_Reg);
     59c:	cb e3       	ldi	r28, 0x3B	; 59
     59e:	d0 e0       	ldi	r29, 0x00	; 0
		case DIO_PortD :
		Reg = &(DIO->PORTD_Reg);
		break;
	}
	
	switch(Bit)
     5a0:	8e 2f       	mov	r24, r30
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	fc 01       	movw	r30, r24
     5a6:	ee 5c       	subi	r30, 0xCE	; 206
     5a8:	ff 4f       	sbci	r31, 0xFF	; 255
     5aa:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__tablejump2__>
	{
		case DIO_Bit_0 :
		Reg->Bits.Bit_0 = Level;
     5ae:	88 81       	ld	r24, Y
     5b0:	60 fb       	bst	r22, 0
     5b2:	80 f9       	bld	r24, 0
     5b4:	88 83       	st	Y, r24
		break;
     5b6:	22 c0       	rjmp	.+68     	; 0x5fc <DIO_Channel_Write+0x96>
		
		case DIO_Bit_1 :
		Reg->Bits.Bit_1 = Level;
     5b8:	88 81       	ld	r24, Y
     5ba:	60 fb       	bst	r22, 0
     5bc:	81 f9       	bld	r24, 1
     5be:	88 83       	st	Y, r24
		break;
     5c0:	1d c0       	rjmp	.+58     	; 0x5fc <DIO_Channel_Write+0x96>
		
		case DIO_Bit_2 :
		Reg->Bits.Bit_2 = Level;
     5c2:	88 81       	ld	r24, Y
     5c4:	60 fb       	bst	r22, 0
     5c6:	82 f9       	bld	r24, 2
     5c8:	88 83       	st	Y, r24
		break;
     5ca:	18 c0       	rjmp	.+48     	; 0x5fc <DIO_Channel_Write+0x96>
		
		case DIO_Bit_3 :
		Reg->Bits.Bit_3 = Level;
     5cc:	88 81       	ld	r24, Y
     5ce:	60 fb       	bst	r22, 0
     5d0:	83 f9       	bld	r24, 3
     5d2:	88 83       	st	Y, r24
		break;
     5d4:	13 c0       	rjmp	.+38     	; 0x5fc <DIO_Channel_Write+0x96>
		
		case DIO_Bit_4 :
		Reg->Bits.Bit_4 = Level;
     5d6:	88 81       	ld	r24, Y
     5d8:	60 fb       	bst	r22, 0
     5da:	84 f9       	bld	r24, 4
     5dc:	88 83       	st	Y, r24
		break;
     5de:	0e c0       	rjmp	.+28     	; 0x5fc <DIO_Channel_Write+0x96>
		
		case DIO_Bit_5 :
		Reg->Bits.Bit_5 = Level;
     5e0:	88 81       	ld	r24, Y
     5e2:	60 fb       	bst	r22, 0
     5e4:	85 f9       	bld	r24, 5
     5e6:	88 83       	st	Y, r24
		break;
     5e8:	09 c0       	rjmp	.+18     	; 0x5fc <DIO_Channel_Write+0x96>
		
		case DIO_Bit_6 :
		Reg->Bits.Bit_6 = Level;
     5ea:	88 81       	ld	r24, Y
     5ec:	60 fb       	bst	r22, 0
     5ee:	86 f9       	bld	r24, 6
     5f0:	88 83       	st	Y, r24
		break;
     5f2:	04 c0       	rjmp	.+8      	; 0x5fc <DIO_Channel_Write+0x96>
		
		case DIO_Bit_7 :
		Reg->Bits.Bit_7 = Level;
     5f4:	88 81       	ld	r24, Y
     5f6:	60 fb       	bst	r22, 0
     5f8:	87 f9       	bld	r24, 7
     5fa:	88 83       	st	Y, r24
		break;
	}
}
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <DIO_Channel_Toggle>:

void  DIO_Channel_Toggle(DIO_Channel_Type Channel)
{
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
	DIO_Port_Type Port = Channel/STD_Reg_Bits_Number;
     606:	98 2f       	mov	r25, r24
     608:	96 95       	lsr	r25
     60a:	96 95       	lsr	r25
     60c:	96 95       	lsr	r25
	DIO_Bit_Type  Bit  = Channel%STD_Reg_Bits_Number;
     60e:	e8 2f       	mov	r30, r24
     610:	e7 70       	andi	r30, 0x07	; 7
	volatile DIO_Reg_Type * Reg = 0x00  ;
	
	switch(Port)
     612:	91 30       	cpi	r25, 0x01	; 1
     614:	41 f0       	breq	.+16     	; 0x626 <DIO_Channel_Toggle+0x24>
     616:	80 f0       	brcs	.+32     	; 0x638 <DIO_Channel_Toggle+0x36>
     618:	92 30       	cpi	r25, 0x02	; 2
     61a:	41 f0       	breq	.+16     	; 0x62c <DIO_Channel_Toggle+0x2a>
     61c:	93 30       	cpi	r25, 0x03	; 3
     61e:	49 f0       	breq	.+18     	; 0x632 <DIO_Channel_Toggle+0x30>

void  DIO_Channel_Toggle(DIO_Channel_Type Channel)
{
	DIO_Port_Type Port = Channel/STD_Reg_Bits_Number;
	DIO_Bit_Type  Bit  = Channel%STD_Reg_Bits_Number;
	volatile DIO_Reg_Type * Reg = 0x00  ;
     620:	c0 e0       	ldi	r28, 0x00	; 0
     622:	d0 e0       	ldi	r29, 0x00	; 0
     624:	0b c0       	rjmp	.+22     	; 0x63c <DIO_Channel_Toggle+0x3a>
		case DIO_PortA :
		Reg = &(DIO->PORTA_Reg);
		break;
		
		case DIO_PortB :
		Reg = &(DIO->PORTB_Reg);
     626:	c8 e3       	ldi	r28, 0x38	; 56
     628:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     62a:	08 c0       	rjmp	.+16     	; 0x63c <DIO_Channel_Toggle+0x3a>
		
		case DIO_PortC :
		Reg =&(DIO->PORTC_Reg);
     62c:	c5 e3       	ldi	r28, 0x35	; 53
     62e:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     630:	05 c0       	rjmp	.+10     	; 0x63c <DIO_Channel_Toggle+0x3a>
		
		case DIO_PortD :
		Reg = &(DIO->PORTD_Reg);
     632:	c2 e3       	ldi	r28, 0x32	; 50
     634:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_Channel_Toggle+0x3a>
	volatile DIO_Reg_Type * Reg = 0x00  ;
	
	switch(Port)
	{
		case DIO_PortA :
		Reg = &(DIO->PORTA_Reg);
     638:	cb e3       	ldi	r28, 0x3B	; 59
     63a:	d0 e0       	ldi	r29, 0x00	; 0
		case DIO_PortD :
		Reg = &(DIO->PORTD_Reg);
		break;
	}
	
	switch(Bit)
     63c:	8e 2f       	mov	r24, r30
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	fc 01       	movw	r30, r24
     642:	e6 5c       	subi	r30, 0xC6	; 198
     644:	ff 4f       	sbci	r31, 0xFF	; 255
     646:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__tablejump2__>
	{
		case DIO_Bit_0 :
		Reg->Bits.Bit_0 = !(Reg->Bits.Bit_0) ;
     64a:	88 81       	ld	r24, Y
     64c:	81 70       	andi	r24, 0x01	; 1
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	89 27       	eor	r24, r25
     652:	98 81       	ld	r25, Y
     654:	80 fb       	bst	r24, 0
     656:	90 f9       	bld	r25, 0
     658:	98 83       	st	Y, r25
		break;
     65a:	4a c0       	rjmp	.+148    	; 0x6f0 <DIO_Channel_Toggle+0xee>
		
		case DIO_Bit_1 :
		Reg->Bits.Bit_1 = !(Reg->Bits.Bit_1);
     65c:	88 81       	ld	r24, Y
     65e:	86 95       	lsr	r24
     660:	81 70       	andi	r24, 0x01	; 1
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	89 27       	eor	r24, r25
     666:	98 81       	ld	r25, Y
     668:	80 fb       	bst	r24, 0
     66a:	91 f9       	bld	r25, 1
     66c:	98 83       	st	Y, r25
		break;
     66e:	40 c0       	rjmp	.+128    	; 0x6f0 <DIO_Channel_Toggle+0xee>
		
		case DIO_Bit_2 :
		Reg->Bits.Bit_2 = !(Reg->Bits.Bit_2);
     670:	88 81       	ld	r24, Y
     672:	82 fb       	bst	r24, 2
     674:	99 27       	eor	r25, r25
     676:	90 f9       	bld	r25, 0
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	89 27       	eor	r24, r25
     67c:	98 81       	ld	r25, Y
     67e:	80 fb       	bst	r24, 0
     680:	92 f9       	bld	r25, 2
     682:	98 83       	st	Y, r25
		break;
     684:	35 c0       	rjmp	.+106    	; 0x6f0 <DIO_Channel_Toggle+0xee>
		
		case DIO_Bit_3 :
		Reg->Bits.Bit_3 = !(Reg->Bits.Bit_3);
     686:	88 81       	ld	r24, Y
     688:	83 fb       	bst	r24, 3
     68a:	99 27       	eor	r25, r25
     68c:	90 f9       	bld	r25, 0
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	89 27       	eor	r24, r25
     692:	98 81       	ld	r25, Y
     694:	80 fb       	bst	r24, 0
     696:	93 f9       	bld	r25, 3
     698:	98 83       	st	Y, r25
		break;
     69a:	2a c0       	rjmp	.+84     	; 0x6f0 <DIO_Channel_Toggle+0xee>
		
		case DIO_Bit_4 :
		Reg->Bits.Bit_0 = !(Reg->Bits.Bit_4);
     69c:	88 81       	ld	r24, Y
     69e:	82 95       	swap	r24
     6a0:	81 70       	andi	r24, 0x01	; 1
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	89 27       	eor	r24, r25
     6a6:	98 81       	ld	r25, Y
     6a8:	80 fb       	bst	r24, 0
     6aa:	90 f9       	bld	r25, 0
     6ac:	98 83       	st	Y, r25
		break;
     6ae:	20 c0       	rjmp	.+64     	; 0x6f0 <DIO_Channel_Toggle+0xee>
		
		case DIO_Bit_5 :
		Reg->Bits.Bit_5 = !(Reg->Bits.Bit_5);
     6b0:	88 81       	ld	r24, Y
     6b2:	85 fb       	bst	r24, 5
     6b4:	99 27       	eor	r25, r25
     6b6:	90 f9       	bld	r25, 0
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	89 27       	eor	r24, r25
     6bc:	98 81       	ld	r25, Y
     6be:	80 fb       	bst	r24, 0
     6c0:	95 f9       	bld	r25, 5
     6c2:	98 83       	st	Y, r25
		break;
     6c4:	15 c0       	rjmp	.+42     	; 0x6f0 <DIO_Channel_Toggle+0xee>
		
		case DIO_Bit_6 :
		Reg->Bits.Bit_6 = !(Reg->Bits.Bit_6);
     6c6:	88 81       	ld	r24, Y
     6c8:	86 fb       	bst	r24, 6
     6ca:	99 27       	eor	r25, r25
     6cc:	90 f9       	bld	r25, 0
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	89 27       	eor	r24, r25
     6d2:	98 81       	ld	r25, Y
     6d4:	80 fb       	bst	r24, 0
     6d6:	96 f9       	bld	r25, 6
     6d8:	98 83       	st	Y, r25
		break;
     6da:	0a c0       	rjmp	.+20     	; 0x6f0 <DIO_Channel_Toggle+0xee>
		
		case DIO_Bit_7 :
		Reg->Bits.Bit_7 = !(Reg->Bits.Bit_7);
     6dc:	88 81       	ld	r24, Y
     6de:	87 fb       	bst	r24, 7
     6e0:	99 27       	eor	r25, r25
     6e2:	90 f9       	bld	r25, 0
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	89 27       	eor	r24, r25
     6e8:	98 81       	ld	r25, Y
     6ea:	80 fb       	bst	r24, 0
     6ec:	97 f9       	bld	r25, 7
     6ee:	98 83       	st	Y, r25
		break;
	}
}
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <DIO_Channel_Read>:

STD_Level_Type DIO_Channel_Read(DIO_Channel_Type Channel)
{
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
	DIO_Port_Type  Port = Channel/STD_Reg_Bits_Number;
     6fa:	98 2f       	mov	r25, r24
     6fc:	96 95       	lsr	r25
     6fe:	96 95       	lsr	r25
     700:	96 95       	lsr	r25
	DIO_Bit_Type   Bit  = Channel%STD_Reg_Bits_Number;
     702:	e8 2f       	mov	r30, r24
     704:	e7 70       	andi	r30, 0x07	; 7
	volatile DIO_Reg_Type * Reg = 0x00  ;
	STD_Level_Type level = STD_Low;
	
	switch(Port)
     706:	91 30       	cpi	r25, 0x01	; 1
     708:	41 f0       	breq	.+16     	; 0x71a <DIO_Channel_Read+0x24>
     70a:	80 f0       	brcs	.+32     	; 0x72c <DIO_Channel_Read+0x36>
     70c:	92 30       	cpi	r25, 0x02	; 2
     70e:	41 f0       	breq	.+16     	; 0x720 <DIO_Channel_Read+0x2a>
     710:	93 30       	cpi	r25, 0x03	; 3
     712:	49 f0       	breq	.+18     	; 0x726 <DIO_Channel_Read+0x30>

STD_Level_Type DIO_Channel_Read(DIO_Channel_Type Channel)
{
	DIO_Port_Type  Port = Channel/STD_Reg_Bits_Number;
	DIO_Bit_Type   Bit  = Channel%STD_Reg_Bits_Number;
	volatile DIO_Reg_Type * Reg = 0x00  ;
     714:	c0 e0       	ldi	r28, 0x00	; 0
     716:	d0 e0       	ldi	r29, 0x00	; 0
     718:	0b c0       	rjmp	.+22     	; 0x730 <DIO_Channel_Read+0x3a>
		case DIO_PortA :
		Reg = &(DIO->PINA_Reg);
		break;
		
		case DIO_PortB :
		Reg = &(DIO->PINB_Reg);
     71a:	c6 e3       	ldi	r28, 0x36	; 54
     71c:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     71e:	08 c0       	rjmp	.+16     	; 0x730 <DIO_Channel_Read+0x3a>
		
		case DIO_PortC :
		Reg = &(DIO->PINC_Reg);
     720:	c3 e3       	ldi	r28, 0x33	; 51
     722:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     724:	05 c0       	rjmp	.+10     	; 0x730 <DIO_Channel_Read+0x3a>
		
		case DIO_PortD :
		Reg = &(DIO->PIND_Reg);
     726:	c0 e3       	ldi	r28, 0x30	; 48
     728:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     72a:	02 c0       	rjmp	.+4      	; 0x730 <DIO_Channel_Read+0x3a>
	STD_Level_Type level = STD_Low;
	
	switch(Port)
	{
		case DIO_PortA :
		Reg = &(DIO->PINA_Reg);
     72c:	c9 e3       	ldi	r28, 0x39	; 57
     72e:	d0 e0       	ldi	r29, 0x00	; 0
		case DIO_PortD :
		Reg = &(DIO->PIND_Reg);
		break;
	}
	
	switch(Bit)
     730:	8e 2f       	mov	r24, r30
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	fc 01       	movw	r30, r24
     736:	ee 5b       	subi	r30, 0xBE	; 190
     738:	ff 4f       	sbci	r31, 0xFF	; 255
     73a:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__tablejump2__>
	{
		case DIO_Bit_0 :
		level =Reg->Bits.Bit_0 ;
     73e:	88 81       	ld	r24, Y
     740:	81 70       	andi	r24, 0x01	; 1
		break;
     742:	20 c0       	rjmp	.+64     	; 0x784 <DIO_Channel_Read+0x8e>
		
		case DIO_Bit_1 :
		level = Reg->Bits.Bit_1 ;
     744:	88 81       	ld	r24, Y
     746:	86 95       	lsr	r24
     748:	81 70       	andi	r24, 0x01	; 1
		break;
     74a:	1c c0       	rjmp	.+56     	; 0x784 <DIO_Channel_Read+0x8e>
		
		case DIO_Bit_2 :
		level = Reg->Bits.Bit_2 ;
     74c:	88 81       	ld	r24, Y
     74e:	82 fb       	bst	r24, 2
     750:	88 27       	eor	r24, r24
     752:	80 f9       	bld	r24, 0
		break;
     754:	17 c0       	rjmp	.+46     	; 0x784 <DIO_Channel_Read+0x8e>
		
		case DIO_Bit_3 :
		level = Reg->Bits.Bit_3 ;
     756:	88 81       	ld	r24, Y
     758:	83 fb       	bst	r24, 3
     75a:	88 27       	eor	r24, r24
     75c:	80 f9       	bld	r24, 0
		break;
     75e:	12 c0       	rjmp	.+36     	; 0x784 <DIO_Channel_Read+0x8e>
		
		case DIO_Bit_4 :
		level = Reg->Bits.Bit_4 ;
     760:	88 81       	ld	r24, Y
     762:	82 95       	swap	r24
     764:	81 70       	andi	r24, 0x01	; 1
		break;
     766:	0e c0       	rjmp	.+28     	; 0x784 <DIO_Channel_Read+0x8e>
		
		case DIO_Bit_5 :
		level = Reg->Bits.Bit_5;
     768:	88 81       	ld	r24, Y
     76a:	85 fb       	bst	r24, 5
     76c:	88 27       	eor	r24, r24
     76e:	80 f9       	bld	r24, 0
		break;
     770:	09 c0       	rjmp	.+18     	; 0x784 <DIO_Channel_Read+0x8e>
		
		case DIO_Bit_6 :
		level = Reg->Bits.Bit_6 ;
     772:	88 81       	ld	r24, Y
     774:	86 fb       	bst	r24, 6
     776:	88 27       	eor	r24, r24
     778:	80 f9       	bld	r24, 0
		break;
     77a:	04 c0       	rjmp	.+8      	; 0x784 <DIO_Channel_Read+0x8e>
		
		case DIO_Bit_7 :
		level = Reg->Bits.Bit_7 ;
     77c:	88 81       	ld	r24, Y
     77e:	87 fb       	bst	r24, 7
     780:	88 27       	eor	r24, r24
     782:	80 f9       	bld	r24, 0
		break;
	}
	return level;
}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <DIO_Port_Write>:

void  DIO_Port_Write(DIO_Port_Type Port, Uint8 Data)
{
	switch(Port)
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	41 f0       	breq	.+16     	; 0x79e <DIO_Port_Write+0x14>
     78e:	28 f0       	brcs	.+10     	; 0x79a <DIO_Port_Write+0x10>
     790:	82 30       	cpi	r24, 0x02	; 2
     792:	39 f0       	breq	.+14     	; 0x7a2 <DIO_Port_Write+0x18>
     794:	83 30       	cpi	r24, 0x03	; 3
     796:	39 f0       	breq	.+14     	; 0x7a6 <DIO_Port_Write+0x1c>
     798:	08 95       	ret
	{
		case DIO_PortA:
		DIO->PORTA_Reg.All_Reg = Data;
     79a:	6b bb       	out	0x1b, r22	; 27
		break;
     79c:	08 95       	ret
		
		case DIO_PortB:
		DIO->PORTB_Reg.All_Reg = Data;
     79e:	68 bb       	out	0x18, r22	; 24
		break;
     7a0:	08 95       	ret
		
		case DIO_PortC:
		DIO->PORTC_Reg.All_Reg = Data;
     7a2:	65 bb       	out	0x15, r22	; 21
		break;
     7a4:	08 95       	ret
		
		case DIO_PortD:
		DIO->PORTD_Reg.All_Reg = Data;
     7a6:	62 bb       	out	0x12, r22	; 18
     7a8:	08 95       	ret

000007aa <DIO_Port_Read>:
}

Uint8 DIO_Port_Read(DIO_Port_Type Port)
{
	Uint8 Data =0;
		switch(Port)
     7aa:	81 30       	cpi	r24, 0x01	; 1
     7ac:	41 f0       	breq	.+16     	; 0x7be <DIO_Port_Read+0x14>
     7ae:	28 f0       	brcs	.+10     	; 0x7ba <DIO_Port_Read+0x10>
     7b0:	82 30       	cpi	r24, 0x02	; 2
     7b2:	39 f0       	breq	.+14     	; 0x7c2 <DIO_Port_Read+0x18>
     7b4:	83 30       	cpi	r24, 0x03	; 3
     7b6:	39 f0       	breq	.+14     	; 0x7c6 <DIO_Port_Read+0x1c>
     7b8:	08 c0       	rjmp	.+16     	; 0x7ca <DIO_Port_Read+0x20>
		{
			case DIO_PortA:
			Data = DIO->PINA_Reg.All_Reg  ;
     7ba:	89 b3       	in	r24, 0x19	; 25
			break;
     7bc:	08 95       	ret
			
			case DIO_PortB:
			Data = DIO->PINB_Reg.All_Reg ;
     7be:	86 b3       	in	r24, 0x16	; 22
			break;
     7c0:	08 95       	ret
			
			case DIO_PortC:
			Data = DIO->PINC_Reg.All_Reg ;
     7c2:	83 b3       	in	r24, 0x13	; 19
			break;
     7c4:	08 95       	ret
			
			case DIO_PortD:
			Data = DIO->PIND_Reg.All_Reg ;
     7c6:	80 b3       	in	r24, 0x10	; 16
			break;
     7c8:	08 95       	ret
	}
}

Uint8 DIO_Port_Read(DIO_Port_Type Port)
{
	Uint8 Data =0;
     7ca:	80 e0       	ldi	r24, 0x00	; 0
			case DIO_PortD:
			Data = DIO->PIND_Reg.All_Reg ;
			break;
		}
		return Data;	
     7cc:	08 95       	ret

000007ce <LCD_Send_Data>:
void LCD_Write_String_xy(Sint8* String , LCD_Line_Type Line ,  LCD_Position_Type Position)
{
	Uint8 First_Char_Adr[] = { LCD_FirstLineAdr_Cmd , LCD_SecLineAdr_Cmd };
	LCD_Command(First_Char_Adr[Line] + Position);
	LCD_Write_String(String);
}
     7ce:	cf 93       	push	r28
     7d0:	c8 2f       	mov	r28, r24
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_Port_Read>
     7d8:	8f 70       	andi	r24, 0x0F	; 15
     7da:	9c 2f       	mov	r25, r28
     7dc:	90 7f       	andi	r25, 0xF0	; 240
     7de:	68 2f       	mov	r22, r24
     7e0:	69 2b       	or	r22, r25
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	0e 94 c5 03 	call	0x78a	; 0x78a <DIO_Port_Write>
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	8b e0       	ldi	r24, 0x0B	; 11
     7ec:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_Channel_Write>
     7f0:	65 e0       	ldi	r22, 0x05	; 5
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0e 94 86 01 	call	0x30c	; 0x30c <Delay_ms>
     7fc:	61 e0       	ldi	r22, 0x01	; 1
     7fe:	8b e0       	ldi	r24, 0x0B	; 11
     800:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_Channel_Write>
     804:	65 e0       	ldi	r22, 0x05	; 5
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 86 01 	call	0x30c	; 0x30c <Delay_ms>
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_Port_Read>
     816:	90 e1       	ldi	r25, 0x10	; 16
     818:	c9 9f       	mul	r28, r25
     81a:	90 01       	movw	r18, r0
     81c:	11 24       	eor	r1, r1
     81e:	8f 70       	andi	r24, 0x0F	; 15
     820:	68 2f       	mov	r22, r24
     822:	62 2b       	or	r22, r18
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	0e 94 c5 03 	call	0x78a	; 0x78a <DIO_Port_Write>
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	8b e0       	ldi	r24, 0x0B	; 11
     82e:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_Channel_Write>
     832:	62 e0       	ldi	r22, 0x02	; 2
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 86 01 	call	0x30c	; 0x30c <Delay_ms>
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	8b e0       	ldi	r24, 0x0B	; 11
     842:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_Channel_Write>
     846:	62 e0       	ldi	r22, 0x02	; 2
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 86 01 	call	0x30c	; 0x30c <Delay_ms>
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <LCD_Command>:
     856:	cf 93       	push	r28
     858:	c8 2f       	mov	r28, r24
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	89 e0       	ldi	r24, 0x09	; 9
     85e:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_Channel_Write>
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	8a e0       	ldi	r24, 0x0A	; 10
     866:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_Channel_Write>
     86a:	8c 2f       	mov	r24, r28
     86c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_Send_Data>
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <LCD_Init>:
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	84 e0       	ldi	r24, 0x04	; 4
     878:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	85 e0       	ldi	r24, 0x05	; 5
     880:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     884:	61 e0       	ldi	r22, 0x01	; 1
     886:	86 e0       	ldi	r24, 0x06	; 6
     888:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	87 e0       	ldi	r24, 0x07	; 7
     890:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	89 e0       	ldi	r24, 0x09	; 9
     898:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	8a e0       	ldi	r24, 0x0A	; 10
     8a0:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	8b e0       	ldi	r24, 0x0B	; 11
     8a8:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	8a e0       	ldi	r24, 0x0A	; 10
     8b0:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_Channel_Write>
     8b4:	61 e0       	ldi	r22, 0x01	; 1
     8b6:	8b e0       	ldi	r24, 0x0B	; 11
     8b8:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_Channel_Write>
     8bc:	64 e1       	ldi	r22, 0x14	; 20
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 86 01 	call	0x30c	; 0x30c <Delay_ms>
     8c8:	83 e3       	ldi	r24, 0x33	; 51
     8ca:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_Command>
     8ce:	64 e6       	ldi	r22, 0x64	; 100
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Delay_us>
     8da:	82 e3       	ldi	r24, 0x32	; 50
     8dc:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_Command>
     8e0:	88 e2       	ldi	r24, 0x28	; 40
     8e2:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_Command>
     8e6:	88 e0       	ldi	r24, 0x08	; 8
     8e8:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_Command>
     8ec:	86 e0       	ldi	r24, 0x06	; 6
     8ee:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_Command>
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_Command>
     8f8:	8c e0       	ldi	r24, 0x0C	; 12
     8fa:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_Command>
     8fe:	62 e0       	ldi	r22, 0x02	; 2
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 86 01 	call	0x30c	; 0x30c <Delay_ms>
     90a:	08 95       	ret

0000090c <LCD_Write_Char>:
     90c:	cf 93       	push	r28
     90e:	c8 2f       	mov	r28, r24
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	89 e0       	ldi	r24, 0x09	; 9
     914:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_Channel_Write>
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	8a e0       	ldi	r24, 0x0A	; 10
     91c:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_Channel_Write>
     920:	8c 2f       	mov	r24, r28
     922:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_Send_Data>
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <LCD_Write_String>:
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	8c 01       	movw	r16, r24
     932:	c0 e0       	ldi	r28, 0x00	; 0
     934:	03 c0       	rjmp	.+6      	; 0x93c <LCD_Write_String+0x12>
     936:	0e 94 86 04 	call	0x90c	; 0x90c <LCD_Write_Char>
     93a:	cf 5f       	subi	r28, 0xFF	; 255
     93c:	f8 01       	movw	r30, r16
     93e:	ec 0f       	add	r30, r28
     940:	f1 1d       	adc	r31, r1
     942:	80 81       	ld	r24, Z
     944:	81 11       	cpse	r24, r1
     946:	f7 cf       	rjmp	.-18     	; 0x936 <LCD_Write_String+0xc>
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	08 95       	ret

00000950 <LCD_Clear>:

void LCD_Clear(void)
{
	LCD_Command(LCD_Clear_Cmd);
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_Command>
     956:	08 95       	ret

00000958 <Led_Init>:

#include "Led.h"

void Led_Init(void)
{
	DIO_Channel_Mode(Led_1,Output);
     958:	61 e0       	ldi	r22, 0x01	; 1
     95a:	87 e1       	ldi	r24, 0x17	; 23
     95c:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     960:	08 95       	ret

00000962 <Led_Toggle>:
}
void Led_Toggle(void)
{
	DIO_Channel_Toggle(Led_1);
     962:	87 e1       	ldi	r24, 0x17	; 23
     964:	0e 94 01 03 	call	0x602	; 0x602 <DIO_Channel_Toggle>
     968:	08 95       	ret

0000096a <main>:

#include "Smart_Home_Room.h"
#include <stdlib.h>

int main(void)
{
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	1f 92       	push	r1
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
	Smart_Home_Room_Init();
     974:	0e 94 c2 05 	call	0xb84	; 0xb84 <Smart_Home_Room_Init>
	Smart_Home_Cmd_Type Cmd_From_Control_Room;
	Uint16 Temp_Value = 0;
	Sint8 Temp_Value_String[]={0};
     978:	19 82       	std	Y+1, r1	; 0x01
	Uint8 Count=0;		
     97a:	10 e0       	ldi	r17, 0x00	; 0
	while (1)
	{   
		Cmd_From_Control_Room = SPI_Slave_Recieve_Data();
     97c:	0e 94 2c 06 	call	0xc58	; 0xc58 <SPI_Slave_Recieve_Data>
		switch(Cmd_From_Control_Room)
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	fc 01       	movw	r30, r24
     984:	f0 97       	sbiw	r30, 0x30	; 48
     986:	e7 30       	cpi	r30, 0x07	; 7
     988:	f1 05       	cpc	r31, r1
     98a:	c0 f7       	brcc	.-16     	; 0x97c <main+0x12>
     98c:	e6 5b       	subi	r30, 0xB6	; 182
     98e:	ff 4f       	sbci	r31, 0xFF	; 255
     990:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__tablejump2__>
		{
			case Smart_Home_Toggle_Light_Cmd:
			Led_Toggle();
     994:	0e 94 b1 04 	call	0x962	; 0x962 <Led_Toggle>
			LCD_Clear();
     998:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_Clear>
			Count++;
     99c:	1f 5f       	subi	r17, 0xFF	; 255
			if (Count==2)
     99e:	12 30       	cpi	r17, 0x02	; 2
     9a0:	31 f4       	brne	.+12     	; 0x9ae <main+0x44>
			{
				LCD_Write_String("Light Turned OFF");
     9a2:	80 e6       	ldi	r24, 0x60	; 96
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_Write_String>
				Count=0;
     9aa:	10 e0       	ldi	r17, 0x00	; 0
     9ac:	e7 cf       	rjmp	.-50     	; 0x97c <main+0x12>
			}
			else
			{
			     LCD_Write_String("Light Turned ON");	
     9ae:	81 e7       	ldi	r24, 0x71	; 113
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_Write_String>
     9b6:	e2 cf       	rjmp	.-60     	; 0x97c <main+0x12>
			}	
			break;
			
			case Smart_Home_Measure_Temp_Cmd:
			Temp_Value=Temp_Sensor_Read_Value();
     9b8:	0e 94 37 06 	call	0xc6e	; 0xc6e <Temp_Sensor_Read_Value>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9bc:	4a e0       	ldi	r20, 0x0A	; 10
     9be:	be 01       	movw	r22, r28
     9c0:	6f 5f       	subi	r22, 0xFF	; 255
     9c2:	7f 4f       	sbci	r23, 0xFF	; 255
     9c4:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__itoa_ncheck>
			itoa(Temp_Value,Temp_Value_String,10);	
			LCD_Clear();
     9c8:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_Clear>
			LCD_Write_String("Temperature: ");
     9cc:	81 e8       	ldi	r24, 0x81	; 129
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_Write_String>
			LCD_Write_String(Temp_Value_String);
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_Write_String>
			break;
     9dc:	cf cf       	rjmp	.-98     	; 0x97c <main+0x12>
			
			case Smart_Home_SpeedUP_Motor_Cmd:
			DC_Motor_CW(DC_Motor_High_Speed);
     9de:	8b e4       	ldi	r24, 0x4B	; 75
     9e0:	0e 94 c3 00 	call	0x186	; 0x186 <DC_Motor_CW>
			LCD_Clear();
     9e4:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_Clear>
			LCD_Write_String("Fan Speed Up");
     9e8:	8f e8       	ldi	r24, 0x8F	; 143
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_Write_String>
			break;
     9f0:	c5 cf       	rjmp	.-118    	; 0x97c <main+0x12>
			
			case Smart_Home_SpeedDown_Motor_Cmd:
			DC_Motor_CW(DC_Motor_Low_Speed);
     9f2:	89 e1       	ldi	r24, 0x19	; 25
     9f4:	0e 94 c3 00 	call	0x186	; 0x186 <DC_Motor_CW>
			LCD_Clear();
     9f8:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_Clear>
			LCD_Write_String("Fan Speed Down");
     9fc:	8c e9       	ldi	r24, 0x9C	; 156
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_Write_String>
			break;
     a04:	bb cf       	rjmp	.-138    	; 0x97c <main+0x12>
			
			case Smart_Home_Stop_Motor_Cmd:
			DC_Motor_Stop();
     a06:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DC_Motor_Stop>
			LCD_Clear();
     a0a:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_Clear>
			LCD_Write_String("Fan Is Stopped");
     a0e:	8b ea       	ldi	r24, 0xAB	; 171
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_Write_String>
			break;
     a16:	b2 cf       	rjmp	.-156    	; 0x97c <main+0x12>
			
			case Smart_Home_Close_Door_Cmd:
			Servo_Motor_Angle(0.0);
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	cb 01       	movw	r24, r22
     a1e:	0e 94 64 05 	call	0xac8	; 0xac8 <Servo_Motor_Angle>
			LCD_Clear();
     a22:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_Clear>
			LCD_Write_String("Door Is Closed");
     a26:	8a eb       	ldi	r24, 0xBA	; 186
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_Write_String>
			break;
     a2e:	a6 cf       	rjmp	.-180    	; 0x97c <main+0x12>
			
			case Smart_Home_Open_Door_Cmd:
			Servo_Motor_Angle(90.0);
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	84 eb       	ldi	r24, 0xB4	; 180
     a36:	92 e4       	ldi	r25, 0x42	; 66
     a38:	0e 94 64 05 	call	0xac8	; 0xac8 <Servo_Motor_Angle>
			LCD_Clear();
     a3c:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_Clear>
			LCD_Write_String("Door Is Opened");
     a40:	89 ec       	ldi	r24, 0xC9	; 201
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_Write_String>
			break;
     a48:	99 cf       	rjmp	.-206    	; 0x97c <main+0x12>

00000a4a <Servo_Motor_Init>:
*/

#include "Servo_Motor.h"

void Servo_Motor_Init(void)
{
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <Servo_Motor_Init+0x6>
     a50:	00 d0       	rcall	.+0      	; 0xa52 <Servo_Motor_Init+0x8>
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
	Uint16 ICR1_Value = 0;
	
	DIO_Channel_Mode(Servo_Motor_Channel , Output);
     a56:	61 e0       	ldi	r22, 0x01	; 1
     a58:	8d e1       	ldi	r24, 0x1D	; 29
     a5a:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
	
	Timer1_CS_Select(Timer1_CS_64Presc);
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	0e 94 92 06 	call	0xd24	; 0xd24 <Timer1_CS_Select>
	ICR1_Value = (Uint16) ( ( F_CPU/(Timer1_Presc*F_W) )-1);
     a64:	60 91 da 00 	lds	r22, 0x00DA	; 0x8000da <Timer1_Presc>
     a68:	70 91 db 00 	lds	r23, 0x00DB	; 0x8000db <Timer1_Presc+0x1>
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatunsisf>
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	48 e4       	ldi	r20, 0x48	; 72
     a7a:	52 e4       	ldi	r21, 0x42	; 66
     a7c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__mulsf3>
     a80:	9b 01       	movw	r18, r22
     a82:	ac 01       	movw	r20, r24
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	74 e2       	ldi	r23, 0x24	; 36
     a88:	84 e7       	ldi	r24, 0x74	; 116
     a8a:	9b e4       	ldi	r25, 0x4B	; 75
     a8c:	0e 94 c3 08 	call	0x1186	; 0x1186 <__divsf3>
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e8       	ldi	r20, 0x80	; 128
     a96:	5f e3       	ldi	r21, 0x3F	; 63
     a98:	0e 94 56 08 	call	0x10ac	; 0x10ac <__subsf3>
     a9c:	0e 94 35 09 	call	0x126a	; 0x126a <__fixunssfsi>
	Timer1_ICR1_Reg =  ICR1_Value ;
     aa0:	77 bd       	out	0x27, r23	; 39
     aa2:	66 bd       	out	0x26, r22	; 38
	Timer1_Init_Type Timer1_Servo_Motor_Init={Timer1_WG_FastPWM_ICR1_Mode,  Servo_Motor_COM , Timer1_COM_Clear_Mode , Timer1_CS_64Presc};
     aa4:	8e e0       	ldi	r24, 0x0E	; 14
     aa6:	89 83       	std	Y+1, r24	; 0x01
     aa8:	1a 82       	std	Y+2, r1	; 0x02
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	8b 83       	std	Y+3, r24	; 0x03
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	8c 83       	std	Y+4, r24	; 0x04
	Timer1_Init(&Timer1_Servo_Motor_Init);
     ab2:	ce 01       	movw	r24, r28
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	0e 94 12 08 	call	0x1024	; 0x1024 <Timer1_Init>
}
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <Servo_Motor_Angle>:

void Servo_Motor_Angle(Float32 Angle)
{
     ac8:	8f 92       	push	r8
     aca:	9f 92       	push	r9
     acc:	af 92       	push	r10
     ace:	bf 92       	push	r11
     ad0:	cf 92       	push	r12
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	9b 01       	movw	r18, r22
     ada:	ac 01       	movw	r20, r24
	Float32 T_Duty =0.0;
	Float32 Duty   =0.0;

	T_Duty = T_Duty_max - (((Angle_max-Angle)/(Angle_max-Angle_min))*(T_Duty_min));
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	84 e3       	ldi	r24, 0x34	; 52
     ae2:	93 e4       	ldi	r25, 0x43	; 67
     ae4:	0e 94 56 08 	call	0x10ac	; 0x10ac <__subsf3>
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	44 e3       	ldi	r20, 0x34	; 52
     aee:	53 e4       	ldi	r21, 0x43	; 67
     af0:	0e 94 c3 08 	call	0x1186	; 0x1186 <__divsf3>
     af4:	2f e6       	ldi	r18, 0x6F	; 111
     af6:	32 e1       	ldi	r19, 0x12	; 18
     af8:	43 e8       	ldi	r20, 0x83	; 131
     afa:	5a e3       	ldi	r21, 0x3A	; 58
     afc:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__mulsf3>
     b00:	9b 01       	movw	r18, r22
     b02:	ac 01       	movw	r20, r24
     b04:	6f e6       	ldi	r22, 0x6F	; 111
     b06:	72 e1       	ldi	r23, 0x12	; 18
     b08:	83 e0       	ldi	r24, 0x03	; 3
     b0a:	9b e3       	ldi	r25, 0x3B	; 59
     b0c:	0e 94 56 08 	call	0x10ac	; 0x10ac <__subsf3>
	Duty   = (((T_Duty *F_CPU) / ((Float32)Timer1_Presc*(Timer1_Top+1) ) )*100);
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	34 e2       	ldi	r19, 0x24	; 36
     b14:	44 e7       	ldi	r20, 0x74	; 116
     b16:	5b e4       	ldi	r21, 0x4B	; 75
     b18:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__mulsf3>
     b1c:	4b 01       	movw	r8, r22
     b1e:	5c 01       	movw	r10, r24
     b20:	60 91 da 00 	lds	r22, 0x00DA	; 0x8000da <Timer1_Presc>
     b24:	70 91 db 00 	lds	r23, 0x00DB	; 0x8000db <Timer1_Presc+0x1>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatunsisf>
     b30:	6b 01       	movw	r12, r22
     b32:	7c 01       	movw	r14, r24
     b34:	60 91 d8 00 	lds	r22, 0x00D8	; 0x8000d8 <__data_end>
     b38:	70 91 d9 00 	lds	r23, 0x00D9	; 0x8000d9 <__data_end+0x1>
     b3c:	6f 5f       	subi	r22, 0xFF	; 255
     b3e:	7f 4f       	sbci	r23, 0xFF	; 255
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatunsisf>
     b48:	a7 01       	movw	r20, r14
     b4a:	96 01       	movw	r18, r12
     b4c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__mulsf3>
     b50:	9b 01       	movw	r18, r22
     b52:	ac 01       	movw	r20, r24
     b54:	c5 01       	movw	r24, r10
     b56:	b4 01       	movw	r22, r8
     b58:	0e 94 c3 08 	call	0x1186	; 0x1186 <__divsf3>
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	48 ec       	ldi	r20, 0xC8	; 200
     b62:	52 e4       	ldi	r21, 0x42	; 66
     b64:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__mulsf3>
     b68:	ab 01       	movw	r20, r22
     b6a:	bc 01       	movw	r22, r24

	Timer1_NonInv_FPWM_Duty(Servo_Motor_COM,Duty);
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	0e 94 20 08 	call	0x1040	; 0x1040 <Timer1_NonInv_FPWM_Duty>
     b72:	ff 90       	pop	r15
     b74:	ef 90       	pop	r14
     b76:	df 90       	pop	r13
     b78:	cf 90       	pop	r12
     b7a:	bf 90       	pop	r11
     b7c:	af 90       	pop	r10
     b7e:	9f 90       	pop	r9
     b80:	8f 90       	pop	r8
     b82:	08 95       	ret

00000b84 <Smart_Home_Room_Init>:

#include "Smart_Home_Room.h"

void Smart_Home_Room_Init(void)
{
   Delay_Init();
     b84:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Delay_Init>
   SPI_Slave_Init();
     b88:	0e 94 18 06 	call	0xc30	; 0xc30 <SPI_Slave_Init>
   Led_Init();
     b8c:	0e 94 ac 04 	call	0x958	; 0x958 <Led_Init>
   LCD_Init();
     b90:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_Init>
   DC_Motor_Init();	
     b94:	0e 94 9e 00 	call	0x13c	; 0x13c <DC_Motor_Init>
   Servo_Motor_Init();
     b98:	0e 94 25 05 	call	0xa4a	; 0xa4a <Servo_Motor_Init>
   Temp_Sensor_Init();
     b9c:	0e 94 34 06 	call	0xc68	; 0xc68 <Temp_Sensor_Init>
     ba0:	08 95       	ret

00000ba2 <SPI_Init>:

void  SPI_Send_Data(Uint8 Data)
{
	SPI_Data_Reg = Data;
	while(SPI_IS_Transfer_Complete()==STD_Low);
}
     ba2:	fc 01       	movw	r30, r24
     ba4:	90 81       	ld	r25, Z
     ba6:	8d b1       	in	r24, 0x0d	; 13
     ba8:	90 fb       	bst	r25, 0
     baa:	84 f9       	bld	r24, 4
     bac:	8d b9       	out	0x0d, r24	; 13
     bae:	91 81       	ldd	r25, Z+1	; 0x01
     bb0:	8d b1       	in	r24, 0x0d	; 13
     bb2:	90 fb       	bst	r25, 0
     bb4:	85 f9       	bld	r24, 5
     bb6:	8d b9       	out	0x0d, r24	; 13
     bb8:	92 81       	ldd	r25, Z+2	; 0x02
     bba:	29 2f       	mov	r18, r25
     bbc:	23 70       	andi	r18, 0x03	; 3
     bbe:	9d b1       	in	r25, 0x0d	; 13
     bc0:	9c 7f       	andi	r25, 0xFC	; 252
     bc2:	92 2b       	or	r25, r18
     bc4:	9d b9       	out	0x0d, r25	; 13
     bc6:	80 81       	ld	r24, Z
     bc8:	88 23       	and	r24, r24
     bca:	b1 f0       	breq	.+44     	; 0xbf8 <SPI_Init+0x56>
     bcc:	81 30       	cpi	r24, 0x01	; 1
     bce:	59 f5       	brne	.+86     	; 0xc26 <SPI_Init+0x84>
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	8c e0       	ldi	r24, 0x0C	; 12
     bd4:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     bd8:	61 e0       	ldi	r22, 0x01	; 1
     bda:	8d e0       	ldi	r24, 0x0D	; 13
     bdc:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	8e e0       	ldi	r24, 0x0E	; 14
     be4:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	8f e0       	ldi	r24, 0x0F	; 15
     bec:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     bf0:	8d b1       	in	r24, 0x0d	; 13
     bf2:	80 64       	ori	r24, 0x40	; 64
     bf4:	8d b9       	out	0x0d, r24	; 13
     bf6:	08 95       	ret
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	8c e0       	ldi	r24, 0x0C	; 12
     bfc:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	8c e0       	ldi	r24, 0x0C	; 12
     c04:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_Channel_Write>
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	8d e0       	ldi	r24, 0x0D	; 13
     c0c:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	8e e0       	ldi	r24, 0x0E	; 14
     c14:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	8f e0       	ldi	r24, 0x0F	; 15
     c1c:	0e 94 65 02 	call	0x4ca	; 0x4ca <DIO_Channel_Mode>
     c20:	8d b1       	in	r24, 0x0d	; 13
     c22:	80 64       	ori	r24, 0x40	; 64
     c24:	8d b9       	out	0x0d, r24	; 13
     c26:	08 95       	ret

00000c28 <SPI_Recieve_Data>:

Uint8 SPI_Recieve_Data(void)
{
	while(SPI_IS_Transfer_Complete()==STD_Low);
     c28:	77 9b       	sbis	0x0e, 7	; 14
     c2a:	fe cf       	rjmp	.-4      	; 0xc28 <SPI_Recieve_Data>
	return SPI_Data_Reg;
     c2c:	8f b1       	in	r24, 0x0f	; 15
}
     c2e:	08 95       	ret

00000c30 <SPI_Slave_Init>:
}
void SPI_Slave_Send_Data(Uint8 Data)
{
	while (SPI_IS_Slave_Enabled()==STD_Low);
	SPI_Send_Data(Data);
}
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	00 d0       	rcall	.+0      	; 0xc36 <SPI_Slave_Init+0x6>
     c36:	1f 92       	push	r1
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	19 82       	std	Y+1, r1	; 0x01
     c3e:	1a 82       	std	Y+2, r1	; 0x02
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	8b 83       	std	Y+3, r24	; 0x03
     c44:	ce 01       	movw	r24, r28
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	0e 94 d1 05 	call	0xba2	; 0xba2 <SPI_Init>
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <SPI_Slave_Recieve_Data>:
Uint8 SPI_Slave_Recieve_Data(void)

{
	while (SPI_IS_Slave_Enabled()==STD_Low);
     c58:	8c e0       	ldi	r24, 0x0C	; 12
     c5a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <DIO_Channel_Read>
     c5e:	81 11       	cpse	r24, r1
     c60:	fb cf       	rjmp	.-10     	; 0xc58 <SPI_Slave_Recieve_Data>
	return SPI_Recieve_Data();
     c62:	0e 94 14 06 	call	0xc28	; 0xc28 <SPI_Recieve_Data>
     c66:	08 95       	ret

00000c68 <Temp_Sensor_Init>:
#include "Temp_Sensor.h"
#include <stdlib.h>

void   Temp_Sensor_Init(void)
{
	ADC_Init();
     c68:	0e 94 80 00 	call	0x100	; 0x100 <ADC_Init>
     c6c:	08 95       	ret

00000c6e <Temp_Sensor_Read_Value>:
Uint16 Temp_Sensor_Read_Value(void)
{
	Uint16 Voltage_Value = 0 ;
	Uint16 Temp_Value    = 0 ;
		
	Voltage_Value = ADC_Channel_Read(Temp_Sensor_Channel);
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	0e 94 8a 00 	call	0x114	; 0x114 <ADC_Channel_Read>
	Temp_Value    = Voltage_Value/4;
	return Temp_Value;
}
     c74:	96 95       	lsr	r25
     c76:	87 95       	ror	r24
     c78:	96 95       	lsr	r25
     c7a:	87 95       	ror	r24
     c7c:	08 95       	ret

00000c7e <Timer0_CS_Select>:
#include "Timer0.h"

Uint8 Timer0_CS_Select(Timer0_CS_Type ClockSource)
{
	Uint16 Prescaler = 0;
	Timer0_TCCR0_Reg->CS0_Bits = ClockSource ;
     c7e:	28 2f       	mov	r18, r24
     c80:	27 70       	andi	r18, 0x07	; 7
     c82:	93 b7       	in	r25, 0x33	; 51
     c84:	98 7f       	andi	r25, 0xF8	; 248
     c86:	92 2b       	or	r25, r18
     c88:	93 bf       	out	0x33, r25	; 51
	switch(ClockSource)
     c8a:	83 30       	cpi	r24, 0x03	; 3
     c8c:	51 f0       	breq	.+20     	; 0xca2 <Timer0_CS_Select+0x24>
     c8e:	18 f4       	brcc	.+6      	; 0xc96 <Timer0_CS_Select+0x18>
     c90:	82 30       	cpi	r24, 0x02	; 2
     c92:	69 f0       	breq	.+26     	; 0xcae <Timer0_CS_Select+0x30>
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <Timer0_CS_Select+0x20>
     c96:	84 30       	cpi	r24, 0x04	; 4
     c98:	31 f0       	breq	.+12     	; 0xca6 <Timer0_CS_Select+0x28>
     c9a:	85 30       	cpi	r24, 0x05	; 5
     c9c:	31 f0       	breq	.+12     	; 0xcaa <Timer0_CS_Select+0x2c>

#include "Timer0.h"

Uint8 Timer0_CS_Select(Timer0_CS_Type ClockSource)
{
	Uint16 Prescaler = 0;
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	08 95       	ret
		break;
		case Timer0_CS_8Presc:
		Prescaler = 8;
		break;
		case Timer0_CS_64Presc:
		Prescaler = 64;
     ca2:	80 e4       	ldi	r24, 0x40	; 64
		break;
     ca4:	08 95       	ret
		case Timer0_CS_256Presc:
		Prescaler = 256;
     ca6:	80 e0       	ldi	r24, 0x00	; 0
		break;
     ca8:	08 95       	ret
		case Timer0_CS_1024Presc:
		Prescaler = 1024;
     caa:	80 e0       	ldi	r24, 0x00	; 0
		break;
     cac:	08 95       	ret
		case Timer0_CS_ExtCS_FallingEdge:
		case Timer0_CS_ExtCS_RisingEdge:
		Prescaler = 0;
		break;
		case Timer0_CS_8Presc:
		Prescaler = 8;
     cae:	88 e0       	ldi	r24, 0x08	; 8
		case Timer0_CS_1024Presc:
		Prescaler = 1024;
		break;
	}
	return Prescaler;
}
     cb0:	08 95       	ret

00000cb2 <Timer0_Mode_Select>:

void Timer0_Mode_Select(Timer0_WG_Mode_Type WG_Mode , Timer0_COM_Mode_Type CMO_Mode)
{
	switch(WG_Mode)
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	69 f0       	breq	.+26     	; 0xcd0 <Timer0_Mode_Select+0x1e>
     cb6:	28 f0       	brcs	.+10     	; 0xcc2 <Timer0_Mode_Select+0x10>
     cb8:	82 30       	cpi	r24, 0x02	; 2
     cba:	89 f0       	breq	.+34     	; 0xcde <Timer0_Mode_Select+0x2c>
     cbc:	83 30       	cpi	r24, 0x03	; 3
     cbe:	b1 f0       	breq	.+44     	; 0xcec <Timer0_Mode_Select+0x3a>
     cc0:	1b c0       	rjmp	.+54     	; 0xcf8 <Timer0_Mode_Select+0x46>
	{
		case Timer0_WG_Normal_Mode:
		Timer0_TCCR0_Reg->WGM01_Bit=STD_Low;
     cc2:	83 b7       	in	r24, 0x33	; 51
     cc4:	87 7f       	andi	r24, 0xF7	; 247
     cc6:	83 bf       	out	0x33, r24	; 51
		Timer0_TCCR0_Reg->WGM00_Bit=STD_Low;
     cc8:	83 b7       	in	r24, 0x33	; 51
     cca:	8f 7b       	andi	r24, 0xBF	; 191
     ccc:	83 bf       	out	0x33, r24	; 51
		break;
     cce:	14 c0       	rjmp	.+40     	; 0xcf8 <Timer0_Mode_Select+0x46>
		
		case Timer0_WG_PWM_Mode:
		Timer0_TCCR0_Reg->WGM01_Bit=STD_Low;
     cd0:	83 b7       	in	r24, 0x33	; 51
     cd2:	87 7f       	andi	r24, 0xF7	; 247
     cd4:	83 bf       	out	0x33, r24	; 51
		Timer0_TCCR0_Reg->WGM00_Bit=STD_High;
     cd6:	83 b7       	in	r24, 0x33	; 51
     cd8:	80 64       	ori	r24, 0x40	; 64
     cda:	83 bf       	out	0x33, r24	; 51
		break;
     cdc:	0d c0       	rjmp	.+26     	; 0xcf8 <Timer0_Mode_Select+0x46>
		
		case Timer0_WG_CTC_Mode:
		Timer0_TCCR0_Reg->WGM01_Bit=STD_High;
     cde:	83 b7       	in	r24, 0x33	; 51
     ce0:	88 60       	ori	r24, 0x08	; 8
     ce2:	83 bf       	out	0x33, r24	; 51
		Timer0_TCCR0_Reg->WGM00_Bit=STD_Low;
     ce4:	83 b7       	in	r24, 0x33	; 51
     ce6:	8f 7b       	andi	r24, 0xBF	; 191
     ce8:	83 bf       	out	0x33, r24	; 51
		break;
     cea:	06 c0       	rjmp	.+12     	; 0xcf8 <Timer0_Mode_Select+0x46>
		
		case Timer0_WG_FastPWM_Mode:
		Timer0_TCCR0_Reg->WGM01_Bit=STD_High;
     cec:	83 b7       	in	r24, 0x33	; 51
     cee:	88 60       	ori	r24, 0x08	; 8
     cf0:	83 bf       	out	0x33, r24	; 51
		Timer0_TCCR0_Reg->WGM00_Bit=STD_High;
     cf2:	83 b7       	in	r24, 0x33	; 51
     cf4:	80 64       	ori	r24, 0x40	; 64
     cf6:	83 bf       	out	0x33, r24	; 51
		break;
	}
	Timer0_TCCR0_Reg->COM0_Bits = CMO_Mode;
     cf8:	63 70       	andi	r22, 0x03	; 3
     cfa:	86 2f       	mov	r24, r22
     cfc:	82 95       	swap	r24
     cfe:	80 7f       	andi	r24, 0xF0	; 240
     d00:	63 b7       	in	r22, 0x33	; 51
     d02:	6f 7c       	andi	r22, 0xCF	; 207
     d04:	68 2b       	or	r22, r24
     d06:	63 bf       	out	0x33, r22	; 51
     d08:	08 95       	ret

00000d0a <Timer0_Init>:
}

void  Timer0_Init(Timer0_Init_Type* Timer0_Init_Instance)
{
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	ec 01       	movw	r28, r24
    Timer0_CS_Select(Timer0_Init_Instance->CS);
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Timer0_CS_Select>
	Timer0_Mode_Select(Timer0_Init_Instance->WG_Mode , Timer0_Init_Instance->COM_Mode);	
     d16:	69 81       	ldd	r22, Y+1	; 0x01
     d18:	88 81       	ld	r24, Y
     d1a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Timer0_Mode_Select>
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	08 95       	ret

00000d24 <Timer1_CS_Select>:
#include "Timer1.h"

void Timer1_CS_Select(Timer1_CS_Type ClockSource)
{
	
	Timer1_TCCR1B_Reg->CS1_Bits = ClockSource ;
     d24:	28 2f       	mov	r18, r24
     d26:	27 70       	andi	r18, 0x07	; 7
     d28:	9e b5       	in	r25, 0x2e	; 46
     d2a:	98 7f       	andi	r25, 0xF8	; 248
     d2c:	92 2b       	or	r25, r18
     d2e:	9e bd       	out	0x2e, r25	; 46
	Timer1_Presc = 1;
     d30:	21 e0       	ldi	r18, 0x01	; 1
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	30 93 db 00 	sts	0x00DB, r19	; 0x8000db <Timer1_Presc+0x1>
     d38:	20 93 da 00 	sts	0x00DA, r18	; 0x8000da <Timer1_Presc>
	switch(ClockSource)
     d3c:	83 30       	cpi	r24, 0x03	; 3
     d3e:	81 f0       	breq	.+32     	; 0xd60 <Timer1_CS_Select+0x3c>
     d40:	18 f4       	brcc	.+6      	; 0xd48 <Timer1_CS_Select+0x24>
     d42:	82 30       	cpi	r24, 0x02	; 2
     d44:	31 f0       	breq	.+12     	; 0xd52 <Timer1_CS_Select+0x2e>
     d46:	08 95       	ret
     d48:	84 30       	cpi	r24, 0x04	; 4
     d4a:	89 f0       	breq	.+34     	; 0xd6e <Timer1_CS_Select+0x4a>
     d4c:	85 30       	cpi	r24, 0x05	; 5
     d4e:	b1 f0       	breq	.+44     	; 0xd7c <Timer1_CS_Select+0x58>
     d50:	08 95       	ret
		case Timer1_CS_NoPresc:
		Timer1_Presc = 1;
		break;

		case Timer1_CS_8Presc:
		Timer1_Presc = 8;
     d52:	88 e0       	ldi	r24, 0x08	; 8
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <Timer1_Presc+0x1>
     d5a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <Timer1_Presc>
		break;
     d5e:	08 95       	ret
		
		case Timer1_CS_64Presc:
		Timer1_Presc = 64;
     d60:	80 e4       	ldi	r24, 0x40	; 64
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <Timer1_Presc+0x1>
     d68:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <Timer1_Presc>
		break;
     d6c:	08 95       	ret
		
		case Timer1_CS_256Presc:
		Timer1_Presc = 256;
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <Timer1_Presc+0x1>
     d76:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <Timer1_Presc>
		break;
     d7a:	08 95       	ret
		
		case Timer1_CS_1024Presc:
		Timer1_Presc = 1024;
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	94 e0       	ldi	r25, 0x04	; 4
     d80:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <Timer1_Presc+0x1>
     d84:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <Timer1_Presc>
     d88:	08 95       	ret

00000d8a <Timer1_Mode_Select>:
	}
}

void Timer1_Mode_Select(Timer1_WG_Mode_Type WG_Mode ,Timer1_COM_Type COM_Type, Timer1_COM_Mode_Type COM_Mode)
{
	switch(WG_Mode)
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	80 31       	cpi	r24, 0x10	; 16
     d8e:	91 05       	cpc	r25, r1
     d90:	08 f0       	brcs	.+2      	; 0xd94 <Timer1_Mode_Select+0xa>
     d92:	32 c1       	rjmp	.+612    	; 0xff8 <Timer1_Mode_Select+0x26e>
     d94:	fc 01       	movw	r30, r24
     d96:	ef 5a       	subi	r30, 0xAF	; 175
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__tablejump2__>
	{
		case Timer1_WG_Normal_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_Low;
     d9e:	8e b5       	in	r24, 0x2e	; 46
     da0:	8f 7e       	andi	r24, 0xEF	; 239
     da2:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_Low;
     da4:	8e b5       	in	r24, 0x2e	; 46
     da6:	87 7f       	andi	r24, 0xF7	; 247
     da8:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_Low;
     daa:	8f b5       	in	r24, 0x2f	; 47
     dac:	8d 7f       	andi	r24, 0xFD	; 253
     dae:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_Low;
     db0:	8f b5       	in	r24, 0x2f	; 47
     db2:	8e 7f       	andi	r24, 0xFE	; 254
     db4:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top =0xFFFF;
     db6:	8f ef       	ldi	r24, 0xFF	; 255
     db8:	9f ef       	ldi	r25, 0xFF	; 255
     dba:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
     dbe:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
		break;
     dc2:	1a c1       	rjmp	.+564    	; 0xff8 <Timer1_Mode_Select+0x26e>
		
		case Timer1_WG_PWM_8Bit_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_Low;
     dc4:	8e b5       	in	r24, 0x2e	; 46
     dc6:	8f 7e       	andi	r24, 0xEF	; 239
     dc8:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_Low;
     dca:	8e b5       	in	r24, 0x2e	; 46
     dcc:	87 7f       	andi	r24, 0xF7	; 247
     dce:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_Low;
     dd0:	8f b5       	in	r24, 0x2f	; 47
     dd2:	8d 7f       	andi	r24, 0xFD	; 253
     dd4:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_High;
     dd6:	8f b5       	in	r24, 0x2f	; 47
     dd8:	81 60       	ori	r24, 0x01	; 1
     dda:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top =255;
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
     de4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
		break;
     de8:	07 c1       	rjmp	.+526    	; 0xff8 <Timer1_Mode_Select+0x26e>
		
		case Timer1_WG_PWM_9Bit_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_Low;
     dea:	8e b5       	in	r24, 0x2e	; 46
     dec:	8f 7e       	andi	r24, 0xEF	; 239
     dee:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_Low;
     df0:	8e b5       	in	r24, 0x2e	; 46
     df2:	87 7f       	andi	r24, 0xF7	; 247
     df4:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_High;
     df6:	8f b5       	in	r24, 0x2f	; 47
     df8:	82 60       	ori	r24, 0x02	; 2
     dfa:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_Low;
     dfc:	8f b5       	in	r24, 0x2f	; 47
     dfe:	8e 7f       	andi	r24, 0xFE	; 254
     e00:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = 511;
     e02:	8f ef       	ldi	r24, 0xFF	; 255
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
     e0a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
		break;
     e0e:	f4 c0       	rjmp	.+488    	; 0xff8 <Timer1_Mode_Select+0x26e>
		
		case Timer1_WG_PWM_10Bit_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_Low;
     e10:	8e b5       	in	r24, 0x2e	; 46
     e12:	8f 7e       	andi	r24, 0xEF	; 239
     e14:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_Low;
     e16:	8e b5       	in	r24, 0x2e	; 46
     e18:	87 7f       	andi	r24, 0xF7	; 247
     e1a:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_High;
     e1c:	8f b5       	in	r24, 0x2f	; 47
     e1e:	82 60       	ori	r24, 0x02	; 2
     e20:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_High;
     e22:	8f b5       	in	r24, 0x2f	; 47
     e24:	81 60       	ori	r24, 0x01	; 1
     e26:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = 1023;
     e28:	8f ef       	ldi	r24, 0xFF	; 255
     e2a:	93 e0       	ldi	r25, 0x03	; 3
     e2c:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
     e30:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
		break;
     e34:	e1 c0       	rjmp	.+450    	; 0xff8 <Timer1_Mode_Select+0x26e>
		
		case Timer1_WG_CTC_OCR1A_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_Low;
     e36:	8e b5       	in	r24, 0x2e	; 46
     e38:	8f 7e       	andi	r24, 0xEF	; 239
     e3a:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_High;
     e3c:	8e b5       	in	r24, 0x2e	; 46
     e3e:	88 60       	ori	r24, 0x08	; 8
     e40:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_Low;
     e42:	8f b5       	in	r24, 0x2f	; 47
     e44:	8d 7f       	andi	r24, 0xFD	; 253
     e46:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_Low;
     e48:	8f b5       	in	r24, 0x2f	; 47
     e4a:	8e 7f       	andi	r24, 0xFE	; 254
     e4c:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = Timer1_OCR1A_Reg ;
     e4e:	8a b5       	in	r24, 0x2a	; 42
     e50:	9b b5       	in	r25, 0x2b	; 43
     e52:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
     e56:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
		break;
     e5a:	ce c0       	rjmp	.+412    	; 0xff8 <Timer1_Mode_Select+0x26e>
		
		case Timer1_WG_FastPWM_8Bit_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_Low;
     e5c:	8e b5       	in	r24, 0x2e	; 46
     e5e:	8f 7e       	andi	r24, 0xEF	; 239
     e60:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_High;
     e62:	8e b5       	in	r24, 0x2e	; 46
     e64:	88 60       	ori	r24, 0x08	; 8
     e66:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_Low;
     e68:	8f b5       	in	r24, 0x2f	; 47
     e6a:	8d 7f       	andi	r24, 0xFD	; 253
     e6c:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_High;
     e6e:	8f b5       	in	r24, 0x2f	; 47
     e70:	81 60       	ori	r24, 0x01	; 1
     e72:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = 255;
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
     e7c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
		break;
     e80:	bb c0       	rjmp	.+374    	; 0xff8 <Timer1_Mode_Select+0x26e>
		
		case Timer1_WG_FastPWM_9Bit_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_Low;
     e82:	8e b5       	in	r24, 0x2e	; 46
     e84:	8f 7e       	andi	r24, 0xEF	; 239
     e86:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_High;
     e88:	8e b5       	in	r24, 0x2e	; 46
     e8a:	88 60       	ori	r24, 0x08	; 8
     e8c:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_High;
     e8e:	8f b5       	in	r24, 0x2f	; 47
     e90:	82 60       	ori	r24, 0x02	; 2
     e92:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_Low;
     e94:	8f b5       	in	r24, 0x2f	; 47
     e96:	8e 7f       	andi	r24, 0xFE	; 254
     e98:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = 511;
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
     ea2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
		break;
     ea6:	a8 c0       	rjmp	.+336    	; 0xff8 <Timer1_Mode_Select+0x26e>
		
		case Timer1_WG_FastPWM_10Bit_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_Low;
     ea8:	8e b5       	in	r24, 0x2e	; 46
     eaa:	8f 7e       	andi	r24, 0xEF	; 239
     eac:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_High;
     eae:	8e b5       	in	r24, 0x2e	; 46
     eb0:	88 60       	ori	r24, 0x08	; 8
     eb2:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_High;
     eb4:	8f b5       	in	r24, 0x2f	; 47
     eb6:	82 60       	ori	r24, 0x02	; 2
     eb8:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_High;
     eba:	8f b5       	in	r24, 0x2f	; 47
     ebc:	81 60       	ori	r24, 0x01	; 1
     ebe:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = 1023;
     ec0:	8f ef       	ldi	r24, 0xFF	; 255
     ec2:	93 e0       	ldi	r25, 0x03	; 3
     ec4:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
     ec8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
		break;
     ecc:	95 c0       	rjmp	.+298    	; 0xff8 <Timer1_Mode_Select+0x26e>
		
		case Timer1_WG_PWM_ICR1_B_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_High;
     ece:	8e b5       	in	r24, 0x2e	; 46
     ed0:	80 61       	ori	r24, 0x10	; 16
     ed2:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_Low;
     ed4:	8e b5       	in	r24, 0x2e	; 46
     ed6:	87 7f       	andi	r24, 0xF7	; 247
     ed8:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_Low;
     eda:	8f b5       	in	r24, 0x2f	; 47
     edc:	8d 7f       	andi	r24, 0xFD	; 253
     ede:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_Low;
     ee0:	8f b5       	in	r24, 0x2f	; 47
     ee2:	8e 7f       	andi	r24, 0xFE	; 254
     ee4:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = Timer1_ICR1_Reg;
     ee6:	86 b5       	in	r24, 0x26	; 38
     ee8:	97 b5       	in	r25, 0x27	; 39
     eea:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
     eee:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
		break;
     ef2:	82 c0       	rjmp	.+260    	; 0xff8 <Timer1_Mode_Select+0x26e>
		
		case Timer1_WG_PWM_OCR1A_B_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_High;
     ef4:	8e b5       	in	r24, 0x2e	; 46
     ef6:	80 61       	ori	r24, 0x10	; 16
     ef8:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_Low;
     efa:	8e b5       	in	r24, 0x2e	; 46
     efc:	87 7f       	andi	r24, 0xF7	; 247
     efe:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_Low;
     f00:	8f b5       	in	r24, 0x2f	; 47
     f02:	8d 7f       	andi	r24, 0xFD	; 253
     f04:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_High;
     f06:	8f b5       	in	r24, 0x2f	; 47
     f08:	81 60       	ori	r24, 0x01	; 1
     f0a:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = Timer1_OCR1A_Reg;
     f0c:	8a b5       	in	r24, 0x2a	; 42
     f0e:	9b b5       	in	r25, 0x2b	; 43
     f10:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
     f14:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
		break;
     f18:	6f c0       	rjmp	.+222    	; 0xff8 <Timer1_Mode_Select+0x26e>
		
		case Timer1_WG_PWM_ICR1_T_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_High;
     f1a:	8e b5       	in	r24, 0x2e	; 46
     f1c:	80 61       	ori	r24, 0x10	; 16
     f1e:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_Low;
     f20:	8e b5       	in	r24, 0x2e	; 46
     f22:	87 7f       	andi	r24, 0xF7	; 247
     f24:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_High;
     f26:	8f b5       	in	r24, 0x2f	; 47
     f28:	82 60       	ori	r24, 0x02	; 2
     f2a:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_Low;
     f2c:	8f b5       	in	r24, 0x2f	; 47
     f2e:	8e 7f       	andi	r24, 0xFE	; 254
     f30:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = Timer1_ICR1_Reg ;
     f32:	86 b5       	in	r24, 0x26	; 38
     f34:	97 b5       	in	r25, 0x27	; 39
     f36:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
     f3a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
		break;
     f3e:	5c c0       	rjmp	.+184    	; 0xff8 <Timer1_Mode_Select+0x26e>
		
		case Timer1_WG_PWM_OCR1A_T_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_High;
     f40:	8e b5       	in	r24, 0x2e	; 46
     f42:	80 61       	ori	r24, 0x10	; 16
     f44:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_Low;
     f46:	8e b5       	in	r24, 0x2e	; 46
     f48:	87 7f       	andi	r24, 0xF7	; 247
     f4a:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_High;
     f4c:	8f b5       	in	r24, 0x2f	; 47
     f4e:	82 60       	ori	r24, 0x02	; 2
     f50:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_High;
     f52:	8f b5       	in	r24, 0x2f	; 47
     f54:	81 60       	ori	r24, 0x01	; 1
     f56:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = Timer1_OCR1A_Reg ;
     f58:	8a b5       	in	r24, 0x2a	; 42
     f5a:	9b b5       	in	r25, 0x2b	; 43
     f5c:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
     f60:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
		break;
     f64:	49 c0       	rjmp	.+146    	; 0xff8 <Timer1_Mode_Select+0x26e>
		
		case Timer1_WG_CTC_ICR1_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_High;
     f66:	8e b5       	in	r24, 0x2e	; 46
     f68:	80 61       	ori	r24, 0x10	; 16
     f6a:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_High;
     f6c:	8e b5       	in	r24, 0x2e	; 46
     f6e:	88 60       	ori	r24, 0x08	; 8
     f70:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_Low;
     f72:	8f b5       	in	r24, 0x2f	; 47
     f74:	8d 7f       	andi	r24, 0xFD	; 253
     f76:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_Low;
     f78:	8f b5       	in	r24, 0x2f	; 47
     f7a:	8e 7f       	andi	r24, 0xFE	; 254
     f7c:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = Timer1_ICR1_Reg ;
     f7e:	86 b5       	in	r24, 0x26	; 38
     f80:	97 b5       	in	r25, 0x27	; 39
     f82:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
     f86:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
		break;
     f8a:	36 c0       	rjmp	.+108    	; 0xff8 <Timer1_Mode_Select+0x26e>
		
		case Timer1_WG_Reserved_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_High;
     f8c:	8e b5       	in	r24, 0x2e	; 46
     f8e:	80 61       	ori	r24, 0x10	; 16
     f90:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_High;
     f92:	8e b5       	in	r24, 0x2e	; 46
     f94:	88 60       	ori	r24, 0x08	; 8
     f96:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_Low;
     f98:	8f b5       	in	r24, 0x2f	; 47
     f9a:	8d 7f       	andi	r24, 0xFD	; 253
     f9c:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_High;
     f9e:	8f b5       	in	r24, 0x2f	; 47
     fa0:	81 60       	ori	r24, 0x01	; 1
     fa2:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = 0;
     fa4:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__data_end+0x1>
     fa8:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__data_end>
		break;
     fac:	25 c0       	rjmp	.+74     	; 0xff8 <Timer1_Mode_Select+0x26e>
		
		case Timer1_WG_FastPWM_ICR1_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_High;
     fae:	8e b5       	in	r24, 0x2e	; 46
     fb0:	80 61       	ori	r24, 0x10	; 16
     fb2:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_High;
     fb4:	8e b5       	in	r24, 0x2e	; 46
     fb6:	88 60       	ori	r24, 0x08	; 8
     fb8:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_High;
     fba:	8f b5       	in	r24, 0x2f	; 47
     fbc:	82 60       	ori	r24, 0x02	; 2
     fbe:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_Low;
     fc0:	8f b5       	in	r24, 0x2f	; 47
     fc2:	8e 7f       	andi	r24, 0xFE	; 254
     fc4:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = Timer1_ICR1_Reg ;
     fc6:	86 b5       	in	r24, 0x26	; 38
     fc8:	97 b5       	in	r25, 0x27	; 39
     fca:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
     fce:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
		break;
     fd2:	12 c0       	rjmp	.+36     	; 0xff8 <Timer1_Mode_Select+0x26e>
		
		case Timer1_WG_FastPWM_OCR1A_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_High;
     fd4:	8e b5       	in	r24, 0x2e	; 46
     fd6:	80 61       	ori	r24, 0x10	; 16
     fd8:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_High;
     fda:	8e b5       	in	r24, 0x2e	; 46
     fdc:	88 60       	ori	r24, 0x08	; 8
     fde:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_High;
     fe0:	8f b5       	in	r24, 0x2f	; 47
     fe2:	82 60       	ori	r24, 0x02	; 2
     fe4:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_High;
     fe6:	8f b5       	in	r24, 0x2f	; 47
     fe8:	81 60       	ori	r24, 0x01	; 1
     fea:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = Timer1_OCR1A_Reg ;
     fec:	8a b5       	in	r24, 0x2a	; 42
     fee:	9b b5       	in	r25, 0x2b	; 43
     ff0:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
     ff4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
		break;
	}
	
	switch (COM_Type)
     ff8:	66 23       	and	r22, r22
     ffa:	19 f0       	breq	.+6      	; 0x1002 <Timer1_Mode_Select+0x278>
     ffc:	61 30       	cpi	r22, 0x01	; 1
     ffe:	51 f0       	breq	.+20     	; 0x1014 <Timer1_Mode_Select+0x28a>
    1000:	08 95       	ret
	{
		case Timer1_COM_A:
		Timer1_TCCR1A_Reg->COM1A_Bits = COM_Mode;
    1002:	42 95       	swap	r20
    1004:	44 0f       	add	r20, r20
    1006:	44 0f       	add	r20, r20
    1008:	40 7c       	andi	r20, 0xC0	; 192
    100a:	8f b5       	in	r24, 0x2f	; 47
    100c:	8f 73       	andi	r24, 0x3F	; 63
    100e:	48 2b       	or	r20, r24
    1010:	4f bd       	out	0x2f, r20	; 47
		break;
    1012:	08 95       	ret
		
		case Timer1_COM_B:
		Timer1_TCCR1A_Reg->COM1B_Bits = COM_Mode;
    1014:	43 70       	andi	r20, 0x03	; 3
    1016:	42 95       	swap	r20
    1018:	40 7f       	andi	r20, 0xF0	; 240
    101a:	8f b5       	in	r24, 0x2f	; 47
    101c:	8f 7c       	andi	r24, 0xCF	; 207
    101e:	48 2b       	or	r20, r24
    1020:	4f bd       	out	0x2f, r20	; 47
    1022:	08 95       	ret

00001024 <Timer1_Init>:
	}
	
}

void Timer1_Init(Timer1_Init_Type* Timer1_Init_Instance)
{
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	ec 01       	movw	r28, r24
	Timer1_Mode_Select(Timer1_Init_Instance->WG_Mode, Timer1_Init_Instance->COM_Num , Timer1_Init_Instance->COM_Mode);
    102a:	4a 81       	ldd	r20, Y+2	; 0x02
    102c:	69 81       	ldd	r22, Y+1	; 0x01
    102e:	88 81       	ld	r24, Y
    1030:	0e 94 c5 06 	call	0xd8a	; 0xd8a <Timer1_Mode_Select>
	Timer1_CS_Select(Timer1_Init_Instance->CS);
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	0e 94 92 06 	call	0xd24	; 0xd24 <Timer1_CS_Select>
}
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <Timer1_NonInv_FPWM_Duty>:

void Timer1_NonInv_FPWM_Duty(Timer1_COM_Type COM_Num , Float32 Duty)
{
    1040:	cf 92       	push	r12
    1042:	df 92       	push	r13
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	cf 93       	push	r28
    104a:	c8 2f       	mov	r28, r24
    104c:	cb 01       	movw	r24, r22
    104e:	ba 01       	movw	r22, r20
   
   Uint16 OCR1A_Value = (Uint16) ( (((Float32)Duty/100.0)*(Timer1_Top+1))-1 ) ;
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	48 ec       	ldi	r20, 0xC8	; 200
    1056:	52 e4       	ldi	r21, 0x42	; 66
    1058:	0e 94 c3 08 	call	0x1186	; 0x1186 <__divsf3>
    105c:	6b 01       	movw	r12, r22
    105e:	7c 01       	movw	r14, r24
    1060:	60 91 d8 00 	lds	r22, 0x00D8	; 0x8000d8 <__data_end>
    1064:	70 91 d9 00 	lds	r23, 0x00D9	; 0x8000d9 <__data_end+0x1>
    1068:	6f 5f       	subi	r22, 0xFF	; 255
    106a:	7f 4f       	sbci	r23, 0xFF	; 255
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatunsisf>
    1074:	a7 01       	movw	r20, r14
    1076:	96 01       	movw	r18, r12
    1078:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__mulsf3>
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e8       	ldi	r20, 0x80	; 128
    1082:	5f e3       	ldi	r21, 0x3F	; 63
    1084:	0e 94 56 08 	call	0x10ac	; 0x10ac <__subsf3>
    1088:	0e 94 35 09 	call	0x126a	; 0x126a <__fixunssfsi>
   switch (COM_Num)
    108c:	cc 23       	and	r28, r28
    108e:	19 f0       	breq	.+6      	; 0x1096 <Timer1_NonInv_FPWM_Duty+0x56>
    1090:	c1 30       	cpi	r28, 0x01	; 1
    1092:	21 f0       	breq	.+8      	; 0x109c <Timer1_NonInv_FPWM_Duty+0x5c>
    1094:	05 c0       	rjmp	.+10     	; 0x10a0 <Timer1_NonInv_FPWM_Duty+0x60>
   {
	   case Timer1_COM_A:
	   Timer1_OCR1A_Reg = OCR1A_Value ;
    1096:	7b bd       	out	0x2b, r23	; 43
    1098:	6a bd       	out	0x2a, r22	; 42
	   break;
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <Timer1_NonInv_FPWM_Duty+0x60>
	   
	   case Timer1_COM_B:
	   Timer1_OCR1B_Reg = OCR1A_Value ;
    109c:	79 bd       	out	0x29, r23	; 41
    109e:	68 bd       	out	0x28, r22	; 40
	   break;
   }

}
    10a0:	cf 91       	pop	r28
    10a2:	ff 90       	pop	r15
    10a4:	ef 90       	pop	r14
    10a6:	df 90       	pop	r13
    10a8:	cf 90       	pop	r12
    10aa:	08 95       	ret

000010ac <__subsf3>:
    10ac:	50 58       	subi	r21, 0x80	; 128

000010ae <__addsf3>:
    10ae:	bb 27       	eor	r27, r27
    10b0:	aa 27       	eor	r26, r26
    10b2:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__addsf3x>
    10b6:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__fp_round>
    10ba:	0e 94 aa 09 	call	0x1354	; 0x1354 <__fp_pscA>
    10be:	38 f0       	brcs	.+14     	; 0x10ce <__addsf3+0x20>
    10c0:	0e 94 b1 09 	call	0x1362	; 0x1362 <__fp_pscB>
    10c4:	20 f0       	brcs	.+8      	; 0x10ce <__addsf3+0x20>
    10c6:	39 f4       	brne	.+14     	; 0x10d6 <__addsf3+0x28>
    10c8:	9f 3f       	cpi	r25, 0xFF	; 255
    10ca:	19 f4       	brne	.+6      	; 0x10d2 <__addsf3+0x24>
    10cc:	26 f4       	brtc	.+8      	; 0x10d6 <__addsf3+0x28>
    10ce:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__fp_nan>
    10d2:	0e f4       	brtc	.+2      	; 0x10d6 <__addsf3+0x28>
    10d4:	e0 95       	com	r30
    10d6:	e7 fb       	bst	r30, 7
    10d8:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__fp_inf>

000010dc <__addsf3x>:
    10dc:	e9 2f       	mov	r30, r25
    10de:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fp_split3>
    10e2:	58 f3       	brcs	.-42     	; 0x10ba <__addsf3+0xc>
    10e4:	ba 17       	cp	r27, r26
    10e6:	62 07       	cpc	r22, r18
    10e8:	73 07       	cpc	r23, r19
    10ea:	84 07       	cpc	r24, r20
    10ec:	95 07       	cpc	r25, r21
    10ee:	20 f0       	brcs	.+8      	; 0x10f8 <__addsf3x+0x1c>
    10f0:	79 f4       	brne	.+30     	; 0x1110 <__addsf3x+0x34>
    10f2:	a6 f5       	brtc	.+104    	; 0x115c <__addsf3x+0x80>
    10f4:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__fp_zero>
    10f8:	0e f4       	brtc	.+2      	; 0x10fc <__addsf3x+0x20>
    10fa:	e0 95       	com	r30
    10fc:	0b 2e       	mov	r0, r27
    10fe:	ba 2f       	mov	r27, r26
    1100:	a0 2d       	mov	r26, r0
    1102:	0b 01       	movw	r0, r22
    1104:	b9 01       	movw	r22, r18
    1106:	90 01       	movw	r18, r0
    1108:	0c 01       	movw	r0, r24
    110a:	ca 01       	movw	r24, r20
    110c:	a0 01       	movw	r20, r0
    110e:	11 24       	eor	r1, r1
    1110:	ff 27       	eor	r31, r31
    1112:	59 1b       	sub	r21, r25
    1114:	99 f0       	breq	.+38     	; 0x113c <__addsf3x+0x60>
    1116:	59 3f       	cpi	r21, 0xF9	; 249
    1118:	50 f4       	brcc	.+20     	; 0x112e <__addsf3x+0x52>
    111a:	50 3e       	cpi	r21, 0xE0	; 224
    111c:	68 f1       	brcs	.+90     	; 0x1178 <__addsf3x+0x9c>
    111e:	1a 16       	cp	r1, r26
    1120:	f0 40       	sbci	r31, 0x00	; 0
    1122:	a2 2f       	mov	r26, r18
    1124:	23 2f       	mov	r18, r19
    1126:	34 2f       	mov	r19, r20
    1128:	44 27       	eor	r20, r20
    112a:	58 5f       	subi	r21, 0xF8	; 248
    112c:	f3 cf       	rjmp	.-26     	; 0x1114 <__addsf3x+0x38>
    112e:	46 95       	lsr	r20
    1130:	37 95       	ror	r19
    1132:	27 95       	ror	r18
    1134:	a7 95       	ror	r26
    1136:	f0 40       	sbci	r31, 0x00	; 0
    1138:	53 95       	inc	r21
    113a:	c9 f7       	brne	.-14     	; 0x112e <__addsf3x+0x52>
    113c:	7e f4       	brtc	.+30     	; 0x115c <__addsf3x+0x80>
    113e:	1f 16       	cp	r1, r31
    1140:	ba 0b       	sbc	r27, r26
    1142:	62 0b       	sbc	r22, r18
    1144:	73 0b       	sbc	r23, r19
    1146:	84 0b       	sbc	r24, r20
    1148:	ba f0       	brmi	.+46     	; 0x1178 <__addsf3x+0x9c>
    114a:	91 50       	subi	r25, 0x01	; 1
    114c:	a1 f0       	breq	.+40     	; 0x1176 <__addsf3x+0x9a>
    114e:	ff 0f       	add	r31, r31
    1150:	bb 1f       	adc	r27, r27
    1152:	66 1f       	adc	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	88 1f       	adc	r24, r24
    1158:	c2 f7       	brpl	.-16     	; 0x114a <__addsf3x+0x6e>
    115a:	0e c0       	rjmp	.+28     	; 0x1178 <__addsf3x+0x9c>
    115c:	ba 0f       	add	r27, r26
    115e:	62 1f       	adc	r22, r18
    1160:	73 1f       	adc	r23, r19
    1162:	84 1f       	adc	r24, r20
    1164:	48 f4       	brcc	.+18     	; 0x1178 <__addsf3x+0x9c>
    1166:	87 95       	ror	r24
    1168:	77 95       	ror	r23
    116a:	67 95       	ror	r22
    116c:	b7 95       	ror	r27
    116e:	f7 95       	ror	r31
    1170:	9e 3f       	cpi	r25, 0xFE	; 254
    1172:	08 f0       	brcs	.+2      	; 0x1176 <__addsf3x+0x9a>
    1174:	b0 cf       	rjmp	.-160    	; 0x10d6 <__addsf3+0x28>
    1176:	93 95       	inc	r25
    1178:	88 0f       	add	r24, r24
    117a:	08 f0       	brcs	.+2      	; 0x117e <__addsf3x+0xa2>
    117c:	99 27       	eor	r25, r25
    117e:	ee 0f       	add	r30, r30
    1180:	97 95       	ror	r25
    1182:	87 95       	ror	r24
    1184:	08 95       	ret

00001186 <__divsf3>:
    1186:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__divsf3x>
    118a:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__fp_round>
    118e:	0e 94 b1 09 	call	0x1362	; 0x1362 <__fp_pscB>
    1192:	58 f0       	brcs	.+22     	; 0x11aa <__divsf3+0x24>
    1194:	0e 94 aa 09 	call	0x1354	; 0x1354 <__fp_pscA>
    1198:	40 f0       	brcs	.+16     	; 0x11aa <__divsf3+0x24>
    119a:	29 f4       	brne	.+10     	; 0x11a6 <__divsf3+0x20>
    119c:	5f 3f       	cpi	r21, 0xFF	; 255
    119e:	29 f0       	breq	.+10     	; 0x11aa <__divsf3+0x24>
    11a0:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__fp_inf>
    11a4:	51 11       	cpse	r21, r1
    11a6:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__fp_szero>
    11aa:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__fp_nan>

000011ae <__divsf3x>:
    11ae:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fp_split3>
    11b2:	68 f3       	brcs	.-38     	; 0x118e <__divsf3+0x8>

000011b4 <__divsf3_pse>:
    11b4:	99 23       	and	r25, r25
    11b6:	b1 f3       	breq	.-20     	; 0x11a4 <__divsf3+0x1e>
    11b8:	55 23       	and	r21, r21
    11ba:	91 f3       	breq	.-28     	; 0x11a0 <__divsf3+0x1a>
    11bc:	95 1b       	sub	r25, r21
    11be:	55 0b       	sbc	r21, r21
    11c0:	bb 27       	eor	r27, r27
    11c2:	aa 27       	eor	r26, r26
    11c4:	62 17       	cp	r22, r18
    11c6:	73 07       	cpc	r23, r19
    11c8:	84 07       	cpc	r24, r20
    11ca:	38 f0       	brcs	.+14     	; 0x11da <__divsf3_pse+0x26>
    11cc:	9f 5f       	subi	r25, 0xFF	; 255
    11ce:	5f 4f       	sbci	r21, 0xFF	; 255
    11d0:	22 0f       	add	r18, r18
    11d2:	33 1f       	adc	r19, r19
    11d4:	44 1f       	adc	r20, r20
    11d6:	aa 1f       	adc	r26, r26
    11d8:	a9 f3       	breq	.-22     	; 0x11c4 <__divsf3_pse+0x10>
    11da:	35 d0       	rcall	.+106    	; 0x1246 <__divsf3_pse+0x92>
    11dc:	0e 2e       	mov	r0, r30
    11de:	3a f0       	brmi	.+14     	; 0x11ee <__divsf3_pse+0x3a>
    11e0:	e0 e8       	ldi	r30, 0x80	; 128
    11e2:	32 d0       	rcall	.+100    	; 0x1248 <__divsf3_pse+0x94>
    11e4:	91 50       	subi	r25, 0x01	; 1
    11e6:	50 40       	sbci	r21, 0x00	; 0
    11e8:	e6 95       	lsr	r30
    11ea:	00 1c       	adc	r0, r0
    11ec:	ca f7       	brpl	.-14     	; 0x11e0 <__divsf3_pse+0x2c>
    11ee:	2b d0       	rcall	.+86     	; 0x1246 <__divsf3_pse+0x92>
    11f0:	fe 2f       	mov	r31, r30
    11f2:	29 d0       	rcall	.+82     	; 0x1246 <__divsf3_pse+0x92>
    11f4:	66 0f       	add	r22, r22
    11f6:	77 1f       	adc	r23, r23
    11f8:	88 1f       	adc	r24, r24
    11fa:	bb 1f       	adc	r27, r27
    11fc:	26 17       	cp	r18, r22
    11fe:	37 07       	cpc	r19, r23
    1200:	48 07       	cpc	r20, r24
    1202:	ab 07       	cpc	r26, r27
    1204:	b0 e8       	ldi	r27, 0x80	; 128
    1206:	09 f0       	breq	.+2      	; 0x120a <__divsf3_pse+0x56>
    1208:	bb 0b       	sbc	r27, r27
    120a:	80 2d       	mov	r24, r0
    120c:	bf 01       	movw	r22, r30
    120e:	ff 27       	eor	r31, r31
    1210:	93 58       	subi	r25, 0x83	; 131
    1212:	5f 4f       	sbci	r21, 0xFF	; 255
    1214:	3a f0       	brmi	.+14     	; 0x1224 <__divsf3_pse+0x70>
    1216:	9e 3f       	cpi	r25, 0xFE	; 254
    1218:	51 05       	cpc	r21, r1
    121a:	78 f0       	brcs	.+30     	; 0x123a <__divsf3_pse+0x86>
    121c:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__fp_inf>
    1220:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__fp_szero>
    1224:	5f 3f       	cpi	r21, 0xFF	; 255
    1226:	e4 f3       	brlt	.-8      	; 0x1220 <__divsf3_pse+0x6c>
    1228:	98 3e       	cpi	r25, 0xE8	; 232
    122a:	d4 f3       	brlt	.-12     	; 0x1220 <__divsf3_pse+0x6c>
    122c:	86 95       	lsr	r24
    122e:	77 95       	ror	r23
    1230:	67 95       	ror	r22
    1232:	b7 95       	ror	r27
    1234:	f7 95       	ror	r31
    1236:	9f 5f       	subi	r25, 0xFF	; 255
    1238:	c9 f7       	brne	.-14     	; 0x122c <__divsf3_pse+0x78>
    123a:	88 0f       	add	r24, r24
    123c:	91 1d       	adc	r25, r1
    123e:	96 95       	lsr	r25
    1240:	87 95       	ror	r24
    1242:	97 f9       	bld	r25, 7
    1244:	08 95       	ret
    1246:	e1 e0       	ldi	r30, 0x01	; 1
    1248:	66 0f       	add	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	88 1f       	adc	r24, r24
    124e:	bb 1f       	adc	r27, r27
    1250:	62 17       	cp	r22, r18
    1252:	73 07       	cpc	r23, r19
    1254:	84 07       	cpc	r24, r20
    1256:	ba 07       	cpc	r27, r26
    1258:	20 f0       	brcs	.+8      	; 0x1262 <__divsf3_pse+0xae>
    125a:	62 1b       	sub	r22, r18
    125c:	73 0b       	sbc	r23, r19
    125e:	84 0b       	sbc	r24, r20
    1260:	ba 0b       	sbc	r27, r26
    1262:	ee 1f       	adc	r30, r30
    1264:	88 f7       	brcc	.-30     	; 0x1248 <__divsf3_pse+0x94>
    1266:	e0 95       	com	r30
    1268:	08 95       	ret

0000126a <__fixunssfsi>:
    126a:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__fp_splitA>
    126e:	88 f0       	brcs	.+34     	; 0x1292 <__fixunssfsi+0x28>
    1270:	9f 57       	subi	r25, 0x7F	; 127
    1272:	98 f0       	brcs	.+38     	; 0x129a <__fixunssfsi+0x30>
    1274:	b9 2f       	mov	r27, r25
    1276:	99 27       	eor	r25, r25
    1278:	b7 51       	subi	r27, 0x17	; 23
    127a:	b0 f0       	brcs	.+44     	; 0x12a8 <__fixunssfsi+0x3e>
    127c:	e1 f0       	breq	.+56     	; 0x12b6 <__fixunssfsi+0x4c>
    127e:	66 0f       	add	r22, r22
    1280:	77 1f       	adc	r23, r23
    1282:	88 1f       	adc	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	1a f0       	brmi	.+6      	; 0x128e <__fixunssfsi+0x24>
    1288:	ba 95       	dec	r27
    128a:	c9 f7       	brne	.-14     	; 0x127e <__fixunssfsi+0x14>
    128c:	14 c0       	rjmp	.+40     	; 0x12b6 <__fixunssfsi+0x4c>
    128e:	b1 30       	cpi	r27, 0x01	; 1
    1290:	91 f0       	breq	.+36     	; 0x12b6 <__fixunssfsi+0x4c>
    1292:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__fp_zero>
    1296:	b1 e0       	ldi	r27, 0x01	; 1
    1298:	08 95       	ret
    129a:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__fp_zero>
    129e:	67 2f       	mov	r22, r23
    12a0:	78 2f       	mov	r23, r24
    12a2:	88 27       	eor	r24, r24
    12a4:	b8 5f       	subi	r27, 0xF8	; 248
    12a6:	39 f0       	breq	.+14     	; 0x12b6 <__fixunssfsi+0x4c>
    12a8:	b9 3f       	cpi	r27, 0xF9	; 249
    12aa:	cc f3       	brlt	.-14     	; 0x129e <__fixunssfsi+0x34>
    12ac:	86 95       	lsr	r24
    12ae:	77 95       	ror	r23
    12b0:	67 95       	ror	r22
    12b2:	b3 95       	inc	r27
    12b4:	d9 f7       	brne	.-10     	; 0x12ac <__fixunssfsi+0x42>
    12b6:	3e f4       	brtc	.+14     	; 0x12c6 <__fixunssfsi+0x5c>
    12b8:	90 95       	com	r25
    12ba:	80 95       	com	r24
    12bc:	70 95       	com	r23
    12be:	61 95       	neg	r22
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255
    12c2:	8f 4f       	sbci	r24, 0xFF	; 255
    12c4:	9f 4f       	sbci	r25, 0xFF	; 255
    12c6:	08 95       	ret

000012c8 <__floatunsisf>:
    12c8:	e8 94       	clt
    12ca:	09 c0       	rjmp	.+18     	; 0x12de <__floatsisf+0x12>

000012cc <__floatsisf>:
    12cc:	97 fb       	bst	r25, 7
    12ce:	3e f4       	brtc	.+14     	; 0x12de <__floatsisf+0x12>
    12d0:	90 95       	com	r25
    12d2:	80 95       	com	r24
    12d4:	70 95       	com	r23
    12d6:	61 95       	neg	r22
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	8f 4f       	sbci	r24, 0xFF	; 255
    12dc:	9f 4f       	sbci	r25, 0xFF	; 255
    12de:	99 23       	and	r25, r25
    12e0:	a9 f0       	breq	.+42     	; 0x130c <__floatsisf+0x40>
    12e2:	f9 2f       	mov	r31, r25
    12e4:	96 e9       	ldi	r25, 0x96	; 150
    12e6:	bb 27       	eor	r27, r27
    12e8:	93 95       	inc	r25
    12ea:	f6 95       	lsr	r31
    12ec:	87 95       	ror	r24
    12ee:	77 95       	ror	r23
    12f0:	67 95       	ror	r22
    12f2:	b7 95       	ror	r27
    12f4:	f1 11       	cpse	r31, r1
    12f6:	f8 cf       	rjmp	.-16     	; 0x12e8 <__floatsisf+0x1c>
    12f8:	fa f4       	brpl	.+62     	; 0x1338 <__floatsisf+0x6c>
    12fa:	bb 0f       	add	r27, r27
    12fc:	11 f4       	brne	.+4      	; 0x1302 <__floatsisf+0x36>
    12fe:	60 ff       	sbrs	r22, 0
    1300:	1b c0       	rjmp	.+54     	; 0x1338 <__floatsisf+0x6c>
    1302:	6f 5f       	subi	r22, 0xFF	; 255
    1304:	7f 4f       	sbci	r23, 0xFF	; 255
    1306:	8f 4f       	sbci	r24, 0xFF	; 255
    1308:	9f 4f       	sbci	r25, 0xFF	; 255
    130a:	16 c0       	rjmp	.+44     	; 0x1338 <__floatsisf+0x6c>
    130c:	88 23       	and	r24, r24
    130e:	11 f0       	breq	.+4      	; 0x1314 <__floatsisf+0x48>
    1310:	96 e9       	ldi	r25, 0x96	; 150
    1312:	11 c0       	rjmp	.+34     	; 0x1336 <__floatsisf+0x6a>
    1314:	77 23       	and	r23, r23
    1316:	21 f0       	breq	.+8      	; 0x1320 <__floatsisf+0x54>
    1318:	9e e8       	ldi	r25, 0x8E	; 142
    131a:	87 2f       	mov	r24, r23
    131c:	76 2f       	mov	r23, r22
    131e:	05 c0       	rjmp	.+10     	; 0x132a <__floatsisf+0x5e>
    1320:	66 23       	and	r22, r22
    1322:	71 f0       	breq	.+28     	; 0x1340 <__floatsisf+0x74>
    1324:	96 e8       	ldi	r25, 0x86	; 134
    1326:	86 2f       	mov	r24, r22
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	2a f0       	brmi	.+10     	; 0x1338 <__floatsisf+0x6c>
    132e:	9a 95       	dec	r25
    1330:	66 0f       	add	r22, r22
    1332:	77 1f       	adc	r23, r23
    1334:	88 1f       	adc	r24, r24
    1336:	da f7       	brpl	.-10     	; 0x132e <__floatsisf+0x62>
    1338:	88 0f       	add	r24, r24
    133a:	96 95       	lsr	r25
    133c:	87 95       	ror	r24
    133e:	97 f9       	bld	r25, 7
    1340:	08 95       	ret

00001342 <__fp_inf>:
    1342:	97 f9       	bld	r25, 7
    1344:	9f 67       	ori	r25, 0x7F	; 127
    1346:	80 e8       	ldi	r24, 0x80	; 128
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	08 95       	ret

0000134e <__fp_nan>:
    134e:	9f ef       	ldi	r25, 0xFF	; 255
    1350:	80 ec       	ldi	r24, 0xC0	; 192
    1352:	08 95       	ret

00001354 <__fp_pscA>:
    1354:	00 24       	eor	r0, r0
    1356:	0a 94       	dec	r0
    1358:	16 16       	cp	r1, r22
    135a:	17 06       	cpc	r1, r23
    135c:	18 06       	cpc	r1, r24
    135e:	09 06       	cpc	r0, r25
    1360:	08 95       	ret

00001362 <__fp_pscB>:
    1362:	00 24       	eor	r0, r0
    1364:	0a 94       	dec	r0
    1366:	12 16       	cp	r1, r18
    1368:	13 06       	cpc	r1, r19
    136a:	14 06       	cpc	r1, r20
    136c:	05 06       	cpc	r0, r21
    136e:	08 95       	ret

00001370 <__fp_round>:
    1370:	09 2e       	mov	r0, r25
    1372:	03 94       	inc	r0
    1374:	00 0c       	add	r0, r0
    1376:	11 f4       	brne	.+4      	; 0x137c <__fp_round+0xc>
    1378:	88 23       	and	r24, r24
    137a:	52 f0       	brmi	.+20     	; 0x1390 <__fp_round+0x20>
    137c:	bb 0f       	add	r27, r27
    137e:	40 f4       	brcc	.+16     	; 0x1390 <__fp_round+0x20>
    1380:	bf 2b       	or	r27, r31
    1382:	11 f4       	brne	.+4      	; 0x1388 <__fp_round+0x18>
    1384:	60 ff       	sbrs	r22, 0
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <__fp_round+0x20>
    1388:	6f 5f       	subi	r22, 0xFF	; 255
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	8f 4f       	sbci	r24, 0xFF	; 255
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	08 95       	ret

00001392 <__fp_split3>:
    1392:	57 fd       	sbrc	r21, 7
    1394:	90 58       	subi	r25, 0x80	; 128
    1396:	44 0f       	add	r20, r20
    1398:	55 1f       	adc	r21, r21
    139a:	59 f0       	breq	.+22     	; 0x13b2 <__fp_splitA+0x10>
    139c:	5f 3f       	cpi	r21, 0xFF	; 255
    139e:	71 f0       	breq	.+28     	; 0x13bc <__fp_splitA+0x1a>
    13a0:	47 95       	ror	r20

000013a2 <__fp_splitA>:
    13a2:	88 0f       	add	r24, r24
    13a4:	97 fb       	bst	r25, 7
    13a6:	99 1f       	adc	r25, r25
    13a8:	61 f0       	breq	.+24     	; 0x13c2 <__fp_splitA+0x20>
    13aa:	9f 3f       	cpi	r25, 0xFF	; 255
    13ac:	79 f0       	breq	.+30     	; 0x13cc <__fp_splitA+0x2a>
    13ae:	87 95       	ror	r24
    13b0:	08 95       	ret
    13b2:	12 16       	cp	r1, r18
    13b4:	13 06       	cpc	r1, r19
    13b6:	14 06       	cpc	r1, r20
    13b8:	55 1f       	adc	r21, r21
    13ba:	f2 cf       	rjmp	.-28     	; 0x13a0 <__fp_split3+0xe>
    13bc:	46 95       	lsr	r20
    13be:	f1 df       	rcall	.-30     	; 0x13a2 <__fp_splitA>
    13c0:	08 c0       	rjmp	.+16     	; 0x13d2 <__fp_splitA+0x30>
    13c2:	16 16       	cp	r1, r22
    13c4:	17 06       	cpc	r1, r23
    13c6:	18 06       	cpc	r1, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	f1 cf       	rjmp	.-30     	; 0x13ae <__fp_splitA+0xc>
    13cc:	86 95       	lsr	r24
    13ce:	71 05       	cpc	r23, r1
    13d0:	61 05       	cpc	r22, r1
    13d2:	08 94       	sec
    13d4:	08 95       	ret

000013d6 <__fp_zero>:
    13d6:	e8 94       	clt

000013d8 <__fp_szero>:
    13d8:	bb 27       	eor	r27, r27
    13da:	66 27       	eor	r22, r22
    13dc:	77 27       	eor	r23, r23
    13de:	cb 01       	movw	r24, r22
    13e0:	97 f9       	bld	r25, 7
    13e2:	08 95       	ret

000013e4 <__mulsf3>:
    13e4:	0e 94 05 0a 	call	0x140a	; 0x140a <__mulsf3x>
    13e8:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__fp_round>
    13ec:	0e 94 aa 09 	call	0x1354	; 0x1354 <__fp_pscA>
    13f0:	38 f0       	brcs	.+14     	; 0x1400 <__mulsf3+0x1c>
    13f2:	0e 94 b1 09 	call	0x1362	; 0x1362 <__fp_pscB>
    13f6:	20 f0       	brcs	.+8      	; 0x1400 <__mulsf3+0x1c>
    13f8:	95 23       	and	r25, r21
    13fa:	11 f0       	breq	.+4      	; 0x1400 <__mulsf3+0x1c>
    13fc:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__fp_inf>
    1400:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__fp_nan>
    1404:	11 24       	eor	r1, r1
    1406:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__fp_szero>

0000140a <__mulsf3x>:
    140a:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fp_split3>
    140e:	70 f3       	brcs	.-36     	; 0x13ec <__mulsf3+0x8>

00001410 <__mulsf3_pse>:
    1410:	95 9f       	mul	r25, r21
    1412:	c1 f3       	breq	.-16     	; 0x1404 <__mulsf3+0x20>
    1414:	95 0f       	add	r25, r21
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	55 1f       	adc	r21, r21
    141a:	62 9f       	mul	r22, r18
    141c:	f0 01       	movw	r30, r0
    141e:	72 9f       	mul	r23, r18
    1420:	bb 27       	eor	r27, r27
    1422:	f0 0d       	add	r31, r0
    1424:	b1 1d       	adc	r27, r1
    1426:	63 9f       	mul	r22, r19
    1428:	aa 27       	eor	r26, r26
    142a:	f0 0d       	add	r31, r0
    142c:	b1 1d       	adc	r27, r1
    142e:	aa 1f       	adc	r26, r26
    1430:	64 9f       	mul	r22, r20
    1432:	66 27       	eor	r22, r22
    1434:	b0 0d       	add	r27, r0
    1436:	a1 1d       	adc	r26, r1
    1438:	66 1f       	adc	r22, r22
    143a:	82 9f       	mul	r24, r18
    143c:	22 27       	eor	r18, r18
    143e:	b0 0d       	add	r27, r0
    1440:	a1 1d       	adc	r26, r1
    1442:	62 1f       	adc	r22, r18
    1444:	73 9f       	mul	r23, r19
    1446:	b0 0d       	add	r27, r0
    1448:	a1 1d       	adc	r26, r1
    144a:	62 1f       	adc	r22, r18
    144c:	83 9f       	mul	r24, r19
    144e:	a0 0d       	add	r26, r0
    1450:	61 1d       	adc	r22, r1
    1452:	22 1f       	adc	r18, r18
    1454:	74 9f       	mul	r23, r20
    1456:	33 27       	eor	r19, r19
    1458:	a0 0d       	add	r26, r0
    145a:	61 1d       	adc	r22, r1
    145c:	23 1f       	adc	r18, r19
    145e:	84 9f       	mul	r24, r20
    1460:	60 0d       	add	r22, r0
    1462:	21 1d       	adc	r18, r1
    1464:	82 2f       	mov	r24, r18
    1466:	76 2f       	mov	r23, r22
    1468:	6a 2f       	mov	r22, r26
    146a:	11 24       	eor	r1, r1
    146c:	9f 57       	subi	r25, 0x7F	; 127
    146e:	50 40       	sbci	r21, 0x00	; 0
    1470:	9a f0       	brmi	.+38     	; 0x1498 <__mulsf3_pse+0x88>
    1472:	f1 f0       	breq	.+60     	; 0x14b0 <__mulsf3_pse+0xa0>
    1474:	88 23       	and	r24, r24
    1476:	4a f0       	brmi	.+18     	; 0x148a <__mulsf3_pse+0x7a>
    1478:	ee 0f       	add	r30, r30
    147a:	ff 1f       	adc	r31, r31
    147c:	bb 1f       	adc	r27, r27
    147e:	66 1f       	adc	r22, r22
    1480:	77 1f       	adc	r23, r23
    1482:	88 1f       	adc	r24, r24
    1484:	91 50       	subi	r25, 0x01	; 1
    1486:	50 40       	sbci	r21, 0x00	; 0
    1488:	a9 f7       	brne	.-22     	; 0x1474 <__mulsf3_pse+0x64>
    148a:	9e 3f       	cpi	r25, 0xFE	; 254
    148c:	51 05       	cpc	r21, r1
    148e:	80 f0       	brcs	.+32     	; 0x14b0 <__mulsf3_pse+0xa0>
    1490:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__fp_inf>
    1494:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__fp_szero>
    1498:	5f 3f       	cpi	r21, 0xFF	; 255
    149a:	e4 f3       	brlt	.-8      	; 0x1494 <__mulsf3_pse+0x84>
    149c:	98 3e       	cpi	r25, 0xE8	; 232
    149e:	d4 f3       	brlt	.-12     	; 0x1494 <__mulsf3_pse+0x84>
    14a0:	86 95       	lsr	r24
    14a2:	77 95       	ror	r23
    14a4:	67 95       	ror	r22
    14a6:	b7 95       	ror	r27
    14a8:	f7 95       	ror	r31
    14aa:	e7 95       	ror	r30
    14ac:	9f 5f       	subi	r25, 0xFF	; 255
    14ae:	c1 f7       	brne	.-16     	; 0x14a0 <__mulsf3_pse+0x90>
    14b0:	fe 2b       	or	r31, r30
    14b2:	88 0f       	add	r24, r24
    14b4:	91 1d       	adc	r25, r1
    14b6:	96 95       	lsr	r25
    14b8:	87 95       	ror	r24
    14ba:	97 f9       	bld	r25, 7
    14bc:	08 95       	ret

000014be <__udivmodsi4>:
    14be:	a1 e2       	ldi	r26, 0x21	; 33
    14c0:	1a 2e       	mov	r1, r26
    14c2:	aa 1b       	sub	r26, r26
    14c4:	bb 1b       	sub	r27, r27
    14c6:	fd 01       	movw	r30, r26
    14c8:	0d c0       	rjmp	.+26     	; 0x14e4 <__udivmodsi4_ep>

000014ca <__udivmodsi4_loop>:
    14ca:	aa 1f       	adc	r26, r26
    14cc:	bb 1f       	adc	r27, r27
    14ce:	ee 1f       	adc	r30, r30
    14d0:	ff 1f       	adc	r31, r31
    14d2:	a2 17       	cp	r26, r18
    14d4:	b3 07       	cpc	r27, r19
    14d6:	e4 07       	cpc	r30, r20
    14d8:	f5 07       	cpc	r31, r21
    14da:	20 f0       	brcs	.+8      	; 0x14e4 <__udivmodsi4_ep>
    14dc:	a2 1b       	sub	r26, r18
    14de:	b3 0b       	sbc	r27, r19
    14e0:	e4 0b       	sbc	r30, r20
    14e2:	f5 0b       	sbc	r31, r21

000014e4 <__udivmodsi4_ep>:
    14e4:	66 1f       	adc	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	88 1f       	adc	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	1a 94       	dec	r1
    14ee:	69 f7       	brne	.-38     	; 0x14ca <__udivmodsi4_loop>
    14f0:	60 95       	com	r22
    14f2:	70 95       	com	r23
    14f4:	80 95       	com	r24
    14f6:	90 95       	com	r25
    14f8:	9b 01       	movw	r18, r22
    14fa:	ac 01       	movw	r20, r24
    14fc:	bd 01       	movw	r22, r26
    14fe:	cf 01       	movw	r24, r30
    1500:	08 95       	ret

00001502 <__tablejump2__>:
    1502:	ee 0f       	add	r30, r30
    1504:	ff 1f       	adc	r31, r31
    1506:	05 90       	lpm	r0, Z+
    1508:	f4 91       	lpm	r31, Z
    150a:	e0 2d       	mov	r30, r0
    150c:	09 94       	ijmp

0000150e <__muluhisi3>:
    150e:	0e 94 92 0a 	call	0x1524	; 0x1524 <__umulhisi3>
    1512:	a5 9f       	mul	r26, r21
    1514:	90 0d       	add	r25, r0
    1516:	b4 9f       	mul	r27, r20
    1518:	90 0d       	add	r25, r0
    151a:	a4 9f       	mul	r26, r20
    151c:	80 0d       	add	r24, r0
    151e:	91 1d       	adc	r25, r1
    1520:	11 24       	eor	r1, r1
    1522:	08 95       	ret

00001524 <__umulhisi3>:
    1524:	a2 9f       	mul	r26, r18
    1526:	b0 01       	movw	r22, r0
    1528:	b3 9f       	mul	r27, r19
    152a:	c0 01       	movw	r24, r0
    152c:	a3 9f       	mul	r26, r19
    152e:	70 0d       	add	r23, r0
    1530:	81 1d       	adc	r24, r1
    1532:	11 24       	eor	r1, r1
    1534:	91 1d       	adc	r25, r1
    1536:	b2 9f       	mul	r27, r18
    1538:	70 0d       	add	r23, r0
    153a:	81 1d       	adc	r24, r1
    153c:	11 24       	eor	r1, r1
    153e:	91 1d       	adc	r25, r1
    1540:	08 95       	ret

00001542 <__itoa_ncheck>:
    1542:	bb 27       	eor	r27, r27
    1544:	4a 30       	cpi	r20, 0x0A	; 10
    1546:	31 f4       	brne	.+12     	; 0x1554 <__itoa_ncheck+0x12>
    1548:	99 23       	and	r25, r25
    154a:	22 f4       	brpl	.+8      	; 0x1554 <__itoa_ncheck+0x12>
    154c:	bd e2       	ldi	r27, 0x2D	; 45
    154e:	90 95       	com	r25
    1550:	81 95       	neg	r24
    1552:	9f 4f       	sbci	r25, 0xFF	; 255
    1554:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <__utoa_common>

00001558 <__utoa_ncheck>:
    1558:	bb 27       	eor	r27, r27

0000155a <__utoa_common>:
    155a:	fb 01       	movw	r30, r22
    155c:	55 27       	eor	r21, r21
    155e:	aa 27       	eor	r26, r26
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	aa 1f       	adc	r26, r26
    1566:	a4 17       	cp	r26, r20
    1568:	10 f0       	brcs	.+4      	; 0x156e <__utoa_common+0x14>
    156a:	a4 1b       	sub	r26, r20
    156c:	83 95       	inc	r24
    156e:	50 51       	subi	r21, 0x10	; 16
    1570:	b9 f7       	brne	.-18     	; 0x1560 <__utoa_common+0x6>
    1572:	a0 5d       	subi	r26, 0xD0	; 208
    1574:	aa 33       	cpi	r26, 0x3A	; 58
    1576:	08 f0       	brcs	.+2      	; 0x157a <__utoa_common+0x20>
    1578:	a9 5d       	subi	r26, 0xD9	; 217
    157a:	a1 93       	st	Z+, r26
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	79 f7       	brne	.-34     	; 0x155e <__utoa_common+0x4>
    1580:	b1 11       	cpse	r27, r1
    1582:	b1 93       	st	Z+, r27
    1584:	11 92       	st	Z+, r1
    1586:	cb 01       	movw	r24, r22
    1588:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <strrev>

0000158c <strrev>:
    158c:	dc 01       	movw	r26, r24
    158e:	fc 01       	movw	r30, r24
    1590:	67 2f       	mov	r22, r23
    1592:	71 91       	ld	r23, Z+
    1594:	77 23       	and	r23, r23
    1596:	e1 f7       	brne	.-8      	; 0x1590 <strrev+0x4>
    1598:	32 97       	sbiw	r30, 0x02	; 2
    159a:	04 c0       	rjmp	.+8      	; 0x15a4 <strrev+0x18>
    159c:	7c 91       	ld	r23, X
    159e:	6d 93       	st	X+, r22
    15a0:	70 83       	st	Z, r23
    15a2:	62 91       	ld	r22, -Z
    15a4:	ae 17       	cp	r26, r30
    15a6:	bf 07       	cpc	r27, r31
    15a8:	c8 f3       	brcs	.-14     	; 0x159c <strrev+0x10>
    15aa:	08 95       	ret

000015ac <_exit>:
    15ac:	f8 94       	cli

000015ae <__stop_program>:
    15ae:	ff cf       	rjmp	.-2      	; 0x15ae <__stop_program>
